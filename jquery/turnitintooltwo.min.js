!function($){$(window).on("load",function(){function enableEditingText(i){$("#tabs-"+i+" .editable_date, #tabs-"+i+" .editable_text").editable("enable")}function disableEditingText(i){$("#tabs-"+i+" .editable_date, #tabs-"+i+" .editable_text").editable("disable")}function getLoadingGif(){var i='<div class="loading_gif"></div>';$("#cboxOverlay").after(i);var e=$(window).scrollTop()+$(window).height()/2;$(".loading_gif").css("top",e+"px")}function hideLoadingGif(){$(".loading_gif").remove()}function getSubmissions(table,assignment_id,part_id,start,refresh_requested,total){$.ajax({dataType:"json",type:"POST",url:"ajax.php",async:!0,data:{action:"get_submissions",assignment:assignment_id,part:part_id,start:start,refresh_requested:refresh_requested[part_id],sesskey:M.cfg.sesskey,total:total},success:function(result){if(eval(result),start=result.end,result.aaData.length>0&&table.fnAddData(result.aaData),result.end<result.total)getSubmissions(table,assignment_id,part_id,start,refresh_requested,result.total);else{$("#"+part_id+"_processing").attr("style","visibility: hidden"),refresh_requested[part_id]=0;var allrefreshed=1;$.each(refresh_requested,function(i,e){1==e&&(allrefreshed=0)}),1==allrefreshed&&($(".refreshing_link").hide(),$(".refresh_link").show()),submitVisibility(),enableEditingText(part_id),result.nonsubmitters>0&&$(".nonsubmitters_link").attr("style","display: block")}},error:function(i,e){$("#"+part_id+"_processing").attr("style","visibility: hidden"),$(".dataTables_empty").html(M.str.turnitintooltwo.tiisubmissionsgeterror)}})}function submitVisibility(){1==$(".upload_box").data("user-type")||1==$(".upload_box").data("eula")?$(".upload_box").show():$(".upload_box").hide()}function refreshRubricSelect(){var i=$("#id_rubric").length?"#id_rubric":"#id_plagiarism_rubric",e=$(i).val();$.ajax({dataType:"json",type:"POST",url:"../mod/turnitintooltwo/ajax.php",data:{action:"refresh_rubric_select",assignment:$('input[name="instance"]').val(),modulename:$('input[name="modulename"]').val(),course:$('input[name="course"]').val()},success:function(t){$($(i)).empty();var s=t;$.each(s,function(e,t){if($.isNumeric(e)||""===e)$($(i)).append($("<option>",{value:e,text:t}));else{var s=$("<optgroup>");s.attr("label",e),$.each(t,function(i,e){var t=$("<option></option>");t.val(i),t.text(e),s.append(t)}),$(i).append(s)}}),$(i+' option[value="'+e+'"]').attr("selected","selected")}})}function refreshUserMessages(){$(".messages_loading").show(),$(".messages_amount").html(""),$.ajax({dataType:"html",type:"POST",url:"ajax.php",data:{action:"refresh_user_messages",assignment:$("#assignment_id").html()},success:function(i){$(".messages_loading").hide(),$(".messages_amount").html(i)}})}function resetPeermarkSection(i){$("#tabs-"+i+" .toggle_peermarks").hide(),$("#tabs-"+i+" .peermark_count").html(""),$("#tabs-"+i+" .peermark-loading").show(),$("#tabs-"+i+" .peermark_assignments_container").hide()}function refreshPeermarkAssignments(part_id,refresh_requested){var user_role=$(".tii_peermark_manager_launch").length>0?"Instructor":"Learner";$("#tabs-"+part_id+" .peermark_assignments_container").length>0&&(resetPeermarkSection(part_id),$.ajax({dataType:"json",type:"POST",url:"ajax.php",data:{action:"refresh_peermark_assignments",assignment:$("#assignment_id").html(),part:part_id,refresh_requested:refresh_requested,sesskey:M.cfg.sesskey},success:function(data){eval(data),$("#tabs-"+part_id+" .peermark_assignments_container").html(data.peermark_table),$("#tabs-"+part_id+" .peermark-loading").hide(),$("#tabs-"+part_id+" .peermark_count").html(data.no_of_peermarks),data.no_of_peermarks>0?$("#tabs-"+part_id+" .toggle_peermarks").show():$("#tabs-"+part_id+" .toggle_peermarks").hide(),(data.no_of_peermarks>0&&"Instructor"==user_role||data.peermarks_active&&"Learner"==user_role)&&$("#tabs-"+part_id+" .row_peermark_reviews").show(),"true"==$.cookie("show_peermarks_"+$("#assignment_id").html())&&data.no_of_peermarks>0?($(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".peermark_assignments_container").slideDown()):($(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp())}}))}function initialiseUnanoymiseForm(scope,assignment_id,submission_id){var identifier="a.unanonymise";"row"==scope&&(identifier="#submission_"+submission_id),$(identifier).colorbox({inline:!0,width:"50%",top:"100px",height:"260px",opacity:"0.7",className:"tii_unanonymise_reveal_form",onComplete:function(){var idStr=$(this).attr("id").split("_");if(0==submission_id||void 0==submission_id)var submission_id=idStr[1];0==assignment_id&&(assignment_id=$("#assignment_id").html()),$("#submission_id").html(submission_id),$("#cboxLoadedContent .unanonymise_form").show(),$("#id_reveal").unbind("click"),$("#id_reveal").click(function(){$.ajax({dataType:"json",type:"POST",url:"ajax.php",data:{action:"reveal_submission_name",assignment:assignment_id,submission_id:submission_id,reason:encodeURIComponent($("#id_anonymous_reveal_reason").val()),sesskey:M.cfg.sesskey},success:function(data){if(eval(data),"success"==data.status)$.colorbox.close(),$("#submission_"+submission_id).attr("href",M.cfg.wwwroot+"/user/view.php?id="+data.userid+"&course="+data.courseid),$("#submission_"+submission_id).html(data.name),$("#submission_"+submission_id).removeClass("unanonymise cboxElement");else{var current_msg=$("#unanonymise_desc").html;$("#unanonymise_desc").html(current_msg+" "+data.msg)}}})})},onCleanup:function(){$(".unanonymise_form").hide()}})}function initialiseUploadBox(i,e,t,s){var a=".upload_box";"row"==i&&(a="#upload_"+e+"_"+t+"_"+s);var n="80%",o="80%";$(a).colorbox({onLoad:function(){getLoadingGif(),lightBoxCloseButton(),$(this).hide()},onClosed:function(){hideLoadingGif()},onCleanup:function(){hideLoadingGif();var i=$(this).attr("id").split("_");refreshInboxRow("upload",i[1],i[2],i[3]),$("#tii_close_bar").remove()},iframe:!0,width:n,height:o,opacity:"0.7",className:"upload",transition:"none"})}function initialiseZipDownloads(i){$("#tabs-"+i+" .orig_zip_open, #tabs-"+i+" .pdf_zip_open, #tabs-"+i+" .xls_inbox_open").unbind("click"),$("#tabs-"+i+" .orig_zip_open, #tabs-"+i+" .pdf_zip_open, #tabs-"+i+" .xls_inbox_open").click(function(){var i=$(this).attr("id").split("_");downloadZipFile(i[0]+"_"+i[1],i[2])}),$("#tabs-"+i+" .downloadpdf_box").colorbox({iframe:!0,width:"40%",height:"60%",opacity:"0.7",className:"downloadpdf_window",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()},onClosed:function(){refreshUserMessages()}}),$(document).on("click","#tabs-"+i+" .gmpdfzip_box",function(e){return $(this).colorbox({open:!0,iframe:!0,width:"786px",height:"300px",opacity:"0.7",className:"gmpdfzip_window",transition:"none",href:function(){var e="";return $("#tabs-"+i+" .inbox_checkbox:checked").each(function(i){e+="&submission_id"+i+"="+$(this).val(),i++}),$(this).attr("href")+e},onLoad:function(){getLoadingGif()},onCleanup:function(){hideLoadingGif()},onClosed:function(){refreshUserMessages()}}),!1})}function lightBoxCloseButton(){$("body").append('<div id="tii_close_bar"><a href="#" onclick="jQuery(\'#cboxClose\').click(); return false;">'+M.str.turnitintooltwo.closebutton+"</a></div>")}function smallTiiCloseButton(){$("body").append('<div id="small_tii_close_button"><a href="#" onclick="jQuery(\'#cboxClose\').click(); return false;">'+M.str.turnitintooltwo.closebutton+"</a></div>")}function initialiseDigitalReceipt(){$(".tii_digital_receipt").length>0&&$(".tii_digital_receipt").colorbox({iframe:!0,width:"832px",height:"482px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}})}function initialiseHiddenZipDownloads(i){$("#tabs-"+i+" .origchecked_zip_open").unbind("click"),$("#tabs-"+i+" .origchecked_zip_open").click(function(){var e=$(this).attr("id").split("_");return downloadZipFile(e[0]+"_"+e[1],i),!1})}function initialiseRefreshRow(i,e,t,s){var a=".refresh_row .fa-refresh";"row"==i&&(a="#refreshrow_"+e+"_"+t+"_"+s+" .fa-refresh"),$(a).unbind("click"),$(a).click(function(){$(this).hide(),$(this).siblings(".fa-spinner").css("display","inline-block").addClass("fa-lg");var i=$(this).parent().attr("id").split("_");refreshInboxRow(i[0],i[1],i[2],i[3])})}function initialiseDVLaunchers(i,e,t,s){var a="#"+t+" .download_original_open";"row"==i&&(a="#downloadoriginal_"+e+"_"+t+"_"+s),$(a).unbind("click"),$(a).click(function(){var i=$(this).attr("id").split("_");$(this).children(".score_colour").hasClass("score_colour_")||downloadOriginalFile(i[0],i[1],i[2],i[3])})}function downloadZipFile(i,e){var t=[];"origchecked_zip"!=i&&"gmpdf_zip"!=i||$("#tabs-"+e+" .inbox_checkbox:checked").each(function(i){t[i]=$(this).val()}),$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:i,assignment:$("#assignment_id").html(),part:e,submission_ids:t},success:function(t){$("#"+i+"_form_"+e).html(t),$("#"+i+"_form_"+e).children("form").submit(),$("#"+i+"_form_"+e).html("")}})}function downloadOriginalFile(i,e,t,s){$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"html",data:{action:i,submission:e,assignment:$("#assignment_id").html()},success:function(t){$("#"+i+"_form_"+e).html(t),$("#"+i+"_form_"+e).children("form").submit(),$("#"+i+"_form_"+e).html("")}})}function checkDVClosed(i){window.dvWindow.closed?$("#refresh_"+i).click():setTimeout(function(){checkDVClosed(i)},500)}function submitNothing(user_id,part_id){$("#submitnothing_0_"+part_id+"_"+user_id+" i").attr("class","fa fa-spin fa-spinner fa-lg"),$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"submit_nothing",assignment:$("#assignment_id").html(),part:part_id,user:user_id,sesskey:M.cfg.sesskey},success:function(data){eval(data),$.cookie("submitnothingaccept",!0,{expires:365}),$("table#"+part_id+" .select_all_checkbox").attr("checked",!1)},error:function(i){$("#submitnothing_0_"+part_id+"_"+user_id+" i").attr("class","fa fa-pencil fa-lg"),$("#submitnothing_0_"+part_id+"_"+user_id).removeClass("disabled"),alert(i.responseText)},complete:function(){refreshInboxRow("submitnothing",0,part_id,user_id)}})}function refreshInboxRow(link,submission_id,part_id,user_id){$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"refresh_submission_row",assignment:$("#assignment_id").html(),part:part_id,user:user_id,sesskey:M.cfg.sesskey},success:function(data){$("table#"+part_id+" .select_all_checkbox").attr("checked",!1),eval(data);var i=0;0==submission_id?(link+="_0",submission_id=data.submission_id):link=null==data.submission_id&&0!=submission_id?link+"_"+submission_id:link+"_"+data.submission_id,0!=submission_id&&$("#export_links").removeClass("hidden_class"),oTable=$("table#"+part_id).dataTable();var tr=$("#"+link+"_"+part_id+"_"+user_id).parent().parent(),rowindex=tr.index();oTable.fnDeleteRow(tr),oTable.fnAddData(data.row),submitVisibility(),initialiseUploadBox("row",data.submission_id,part_id,user_id),initialiseDVLaunchers("row",data.submission_id,part_id,user_id),initialiseRefreshRow("row",data.submission_id,part_id,user_id),initialiseCheckboxes(data.submission_id,part_id),initialiseUnanoymiseForm("row",$("#assignment_id").html(),data.submission_id)}})}function initialiseCheckboxes(i,e){var t="#tabs-"+e+" .inbox_checkbox";0!=i&&(t="check_"+i),$("#tabs-"+e+" .inbox_checkbox").click(function(){$("table#"+e+" .select_all_checkbox").attr("checked",!1)}),$(document).on("click",t+", .select_all_checkbox",function(){$("#tabs-"+e+" .inbox_checkbox:checked").length>0?($("#tabs-"+e+" .zip_downloads").slideDown(),initialiseHiddenZipDownloads(e)):($("#tabs-"+e+" .origchecked_zip_open").unbind("click"),$("#tabs-"+e+" .zip_downloads").slideUp())})}function showPartDatesBoxes(){for(var i=0;i<=5;i++)i<=$("#id_numparts").val()?$('fieldset[id$="partdates'+i+'"]').slideDown():$('fieldset[id$="partdates'+i+'"]').slideUp()}if($(".js_required").show(),$(".js_hide").hide(),1==$("#id_submissiontype").val()&&$("#id_submissiontext").parent().parent().hide(),2==$("#id_submissiontype").val()&&$("#id_submissionfile").parent().parent().hide(),$("#id_submissionagreement").length&&$("#id_submitbutton").attr("disabled","disabled"),$("#id_submissionagreement").on("click",function(){$(this).is(":checked")?$("#id_submissionagreement").each(function(){$("#id_submitbutton").removeAttr("disabled")}):$("#id_submissionagreement").each(function(){$("#id_submitbutton").attr("disabled","disabled")})}),$(document).on("click",".delete_paper",function(){var i=$(this).data("confirm"),e=M.str.turnitintooltwo[i].replace(/\\n/g,"\n"),t=confirm(e);t&&$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:"deletesubmission",sesskey:M.cfg.sesskey,paper:$(this).data("paper"),part:$(this).data("part"),assignment:$(this).data("assignment")},success:function(){window.location.href=window.location.href}})}),$(document).on("click",".submit_nothing",function(){if(!$(this).hasClass("disabled")){$(this).addClass("disabled");var i=$(this).prop("id").split("_")[2],e=$(this).prop("id").split("_")[3],t=M.str.turnitintooltwo.submitnothingwarning.replace(/<br>/g,"\n").replace(/&#39;/g,"'"),s=$.cookie("submitnothingaccept");s||confirm(t)?submitNothing(e,i):$(this).removeClass("disabled")}}),$(document).on("change","#id_submissiontype",function(){1==$("#id_submissiontype").val()&&($("#id_submissiontext").parent().parent().hide(),$("#id_submissionfile").parent().parent().show()),2==$("#id_submissiontype").val()&&($("#id_submissionfile").parent().parent().hide(),$("#id_submissiontext").parent().parent().show())}),$(document).on("submit",".submission_form_container form",function(){return $("#id_submissiontitle").val().length>0&&($("#general").slideUp("slow"),$(".mod_turnitintooltwo .noticebox").slideUp("slow"),$(".submission_form_container form").slideUp("slow"),$("#submitting_loader").slideDown("slow"),!0)}),$(".toggle_summary").length>0&&($.cookie("show_summary_"+$("#assignment_id").html())||$.cookie("show_summary_"+$("#assignment_id").html(),!0,{expires:30}),"true"==$.cookie("show_summary_"+$("#assignment_id").html())?($(".hide_summary_"+$("#assignment_id").html()).show(),$(".show_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideDown()):($(".show_summary_"+$("#assignment_id").html()).show(),$(".hide_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideUp()),$(".toggle_summary i").click(function(){$(this).hasClass("show_summary_"+$("#assignment_id").html())?($.cookie("show_summary_"+$("#assignment_id").html(),!0,{expires:30}),$(".show_summary_"+$("#assignment_id").html()).hide(),$(".hide_summary_"+$("#assignment_id").html()).show(),$(".introduction").slideDown()):($.cookie("show_summary_"+$("#assignment_id").html(),!1,{expires:30}),$(".show_summary_"+$("#assignment_id").html()).show(),$(".hide_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideUp())})),$(".toggle_peermarks").length>0&&($.cookie("show_peermarks_"+$("#assignment_id").html())||$.cookie("show_peermarks_"+$("#assignment_id").html(),!0,{expires:30}),"true"==$.cookie("show_peermarks_"+$("#assignment_id").html())?($(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideDown()):($(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp()),$(".toggle_peermarks i").click(function(){$(this).hasClass("show_peermarks_"+$("#assignment_id").html())?($.cookie("show_peermarks_"+$("#assignment_id").html(),!0,{expires:30}),$(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".peermark_assignments_container").slideDown()):($.cookie("show_peermarks_"+$("#assignment_id").html(),!1,{expires:30}),$(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp())})),$(document).on("click",".show_peermark_instructions, .hide_peermark_instructions",function(){var i=$(this).attr("id").split("_");"show"==i[0]?($("#show_peermark_instructions_"+i[3]).hide(),$("#hide_peermark_instructions_"+i[3]).show(),$("#peermark_instructions_"+i[3]).slideDown()):($("#show_peermark_instructions_"+i[3]).show(),$("#hide_peermark_instructions_"+i[3]).hide(),$("#peermark_instructions_"+i[3]).slideUp())}),showPartDatesBoxes(),$(document).on("change","#id_numparts",function(){showPartDatesBoxes()}),$(document).on("click",".splitter-lastname, .splitter-firstname",function(i){var e=$(i.target),t=e.hasClass("sorting_asc"),s="asc",a="desc",n=e.attr("data-col");t||(s="desc",a="asc"),e.closest(".submissionsDataTable").DataTable().order([n,a]).draw(),e.addClass("sorting_"+a).removeClass("sorting sorting_"+s),e.parent().removeClass("sorting sorting_asc sorting_desc"),e.siblings().removeClass("sorting_asc sorting_desc").addClass("sorting")}),$("#dataTable").length>0&&$("#dataTable").dataTable(),"undefined"!=typeof M.str.turnitintooltwo)var dataTablesLang={sProcessing:'<span class="loading-message">'+M.str.turnitintooltwo.sprocessing+"</span>",sZeroRecords:M.str.turnitintooltwo.szerorecords,sInfo:M.str.turnitintooltwo.sinfo,sSearch:M.str.turnitintooltwo.ssearch,sLengthMenu:M.str.turnitintooltwo.slengthmenu,oPaginate:{sNext:M.str.turnitintooltwo.snext,sPrevious:M.str.turnitintooltwo.sprevious}};if($("#tabs").length>0){var activeTab=0;$("#tab_position").length>0&&(activeTab=$("#tab_position").text()),$("#tabs").tabs({active:activeTab,show:function(){var i=$.fn.dataTable.fnTables(!0);i.length>0&&$(i).dataTable().fnAdjustColumnSizing()}})}$(".enrolledMembers").length>0&&$(".enrolledMembers").dataTable({bProcessing:!0,sAjaxSource:"ajax.php",aoColumnDefs:[{bSortable:!1,sClass:"centered_cell",aTargets:[0]},{sClass:"left",aTargets:[1]}],oLanguage:dataTablesLang,fnServerData:function(i,e,t){$.ajax({dataType:"json",type:"POST",url:i,data:{action:"get_members",assignment:$("#assignment_id").html(),role:$("#user_role").html()},success:function(i){t(i)},error:function(i,e){$(".dataTables_processing").attr("style","visibility: hidden"),$(".dataTables_empty").html(M.str.turnitintooltwo.membercheckerror)}})}});var submissionsDataTableColumns=[],visibleCols=[],noOfColumns=$("table.submissionsDataTable th").length/$("table.submissionsDataTable").length,notStudentView=$("table.submissionsDataTable th.sorting_name").length>0,showOrigReport=$("table.submissionsDataTable th.creport").length>0,useGradeMark=$("table.submissionsDataTable th.cgrade").length>0,multipleParts=$("table.submissionsDataTable th.coverallgrade").length>0;if(notStudentView)for(var i=0;i<noOfColumns;i++)3==i?(submissionsDataTableColumns.push({sType:"string",bSortable:!1}),visibleCols.push(!0)):2==i?(submissionsDataTableColumns.push({sType:"string",bSortable:!1,bVisible:!1}),visibleCols.push(!1)):5==i?(submissionsDataTableColumns.push({iDataSort:i-1,sType:"string"}),visibleCols.push(!0)):6==i?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):8==i||10==i&&showOrigReport||10==i&&!showOrigReport||12==i&&useGradeMark?(submissionsDataTableColumns.push({sClass:"right",iDataSort:i-1,sType:"numeric"}),visibleCols.push(!0)):13==i&&showOrigReport||12==i&&!showOrigReport?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):1==i||i>=9&&!showOrigReport&&!useGradeMark||i>=11&&(!showOrigReport&&useGradeMark||showOrigReport&&!useGradeMark)||i>=13&&showOrigReport&&useGradeMark?(submissionsDataTableColumns.push({sClass:"center",bSortable:!1}),visibleCols.push(!0)):(0==i||4==i||7==i||9==i&&showOrigReport||9==i&&!showOrigReport||11==i&&useGradeMark)&&(submissionsDataTableColumns.push({bVisible:!1}),visibleCols.push(!1));else for(var i=0;i<noOfColumns;i++)2==i?(submissionsDataTableColumns.push(null),visibleCols.push(!0)):4==i?(submissionsDataTableColumns.push({iDataSort:i-1,sType:"string"}),visibleCols.push(!0)):5==i?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):7==i||9==i&&showOrigReport||9==i&&!showOrigReport||11==i&&useGradeMark?(submissionsDataTableColumns.push({sClass:"right",iDataSort:i-1,sType:"numeric"}),visibleCols.push(!0)):12==i&&showOrigReport||11==i&&!showOrigReport?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):1==i||i>=8&&!showOrigReport&&!useGradeMark||i>=10&&(!showOrigReport&&useGradeMark||showOrigReport&&!useGradeMark)||i>=12&&showOrigReport&&useGradeMark?(submissionsDataTableColumns.push({sClass:"center",bSortable:!1}),visibleCols.push(!0)):(0==i||3==i||6==i||8==i&&showOrigReport||8==i&&!showOrigReport||10==i&&useGradeMark)&&(submissionsDataTableColumns.push({bVisible:!1}),visibleCols.push(!1));var partTables=[],refreshRequested=[];$("table.submissionsDataTable").each(function(){var i=$(this).attr("id");refreshRequested[i]=0,partTables[i]=$("table#"+i).dataTable({bProcessing:!0,aoColumns:submissionsDataTableColumns,aLengthMenu:[[10,25,50,100,-1],[10,25,50,100,"All"]],aaSorting:[[2,"asc"],[4,"asc"]],sAjaxSource:"ajax.php",oLanguage:dataTablesLang,sDom:'r<"listbar-container"<"top listbar clearfix"lf>><"dt_pagination clearfix"pi>t<"bottom"><"dt_pagination clearfix"pi>',fnServerData:function(e,t,s){$.ajax({dataType:"json",type:"POST",url:e,data:{action:"initialise_redraw"},success:function(e){disableEditingText(i),s(e),$("#"+i+"_processing").attr("style","visibility: visible"),getSubmissions(partTables[i],$("#assignment_id").html(),i,0,refreshRequested,0)}})},bStateSave:!0,fnStateSave:function(e,t){try{localStorage.setItem(i+"DataTables",JSON.stringify(t))}catch(s){}},fnStateSaveParams:function(i,e){e.abVisCols=visibleCols},fnStateLoad:function(e){try{return JSON.parse(localStorage.getItem(i+"DataTables"))}catch(t){}},fnStateLoadParams:function(i,e){e.abVisCols=visibleCols},fnDrawCallback:function(e){initialiseDigitalReceipt(),initialiseDVLaunchers("all",0,i,0),initialiseRefreshRow("all",0,i,0),initialiseUploadBox("all",0,0,0),initialiseZipDownloads(i),initialiseCheckboxes(0,i),initialiseUnanoymiseForm("all",0,0)}})}),$("table.submissionsDataTable").each(function(){var i=$(this).attr("id");refreshPeermarkAssignments(i,0)}),$(".messages_amount").length>0&&refreshUserMessages(),$(".tii_table_functions").each(function(){var i=$(this).attr("id").split("tii_table_functions_")[1],e=$("#tii_table_functions_"+i).html();$("#tii_table_functions_"+i).remove(),$("#"+i+"_length").after(e),$(".messages_inbox").show(),$("#refresh_"+i).show(),$("#refreshing_"+i).hide()});var zip_downloads=$(".zip_downloads");if($.each(zip_downloads,function(){var i=$(this).attr("id").split("_")[1];$(this).remove(),$("#"+i+"_length").after($(this))}),"Learner"==$("#user_role").html()&&$(".dataTables_length, .dataTables_filter, .dt_pagination").hide(),$(".refresh_link").click(function(){return $(this).is(":visible")&&($(".refresh_link").hide(),$(".refreshing_link").show(),$("table.submissionsDataTable").each(function(){refreshRequested[$(this).attr("id")]=1,partTables[$(this).attr("id")].fnReloadAjax(),partTables[$(this).attr("id")].fnStandingRedraw()})),!1}),$("#turnitin_sync_all_grades").length>0&&$(".turnitin_sync_grades").click(function(){$(".turnitin_sync_grades").hide(),$(".turnitin_syncing_grades").show(),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"sync_all_submissions",assignment:$("#turnitin_sync_all_grades").data("turnitintooltwoid"),sesskey:M.cfg.sesskey},success:function(i){$(".turnitin_sync_grades").show(),$(".turnitin_syncing_grades").hide()}})}),$(".submission_failure_msg").length>0&&window.parent.$(".upload_box").colorbox.resize({width:"800px",height:"240px"}),$(".enrol_link").click(function(){$("#enrolling_error").hide(),$(".enrol_link").hide(),$(".enrolling_container").show(),$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:"enrol_all_students",assignment:$("#assignment_id").html(),sesskey:M.cfg.sesskey},success:function(i){window.location.href=window.location.href},error:function(i,e){$(".enrol_link").show(),$(".enrolling_container").hide(),$("#enrolling_error").show()}})}),$(".rubric_manager_launch").length>0&&$(".rubric_manager_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_manager",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){hideLoadingGif(),"rubric_manager_inbox_launch"!=$(this).attr("id")&&refreshRubricSelect(),$("#tii_close_bar").remove()}}),$(".rubric_view_launch").length>0&&$(".rubric_view_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$("#id_rubric, #id_plagiarism_rubric").mousedown(function(){""!=$('input[name="instance"]').val()&&"Y"!=$('input[name="rubric_warning_seen"]').val()&&confirm(M.str.turnitintooltwo.changerubricwarning)&&$('input[name="rubric_warning_seen"]').val("Y")}),($(".quickmark_manager_launch").length>0||$(".plagiarism_turnitin_quickmark_manager_launch").length>0)&&$(".quickmark_manager_launch, .plagiarism_turnitin_quickmark_manager_launch").colorbox({iframe:!0,width:"770px",height:"600px",opacity:"0.7",className:"quickmark_manager",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(".tii_peermark_manager_launch").length>0&&$(".tii_peermark_manager_launch").colorbox({iframe:!0,width:"802px",height:"772px",opacity:"0.7",className:"peermark_manager",transition:"none",onLoad:function(){smallTiiCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()},onClosed:function(){var i=$(this).attr("id").split("_");refreshPeermarkAssignments(i[2],1)}}),$(".tii_peermark_reviews_launch").length>0&&$(".tii_peermark_reviews_launch").colorbox({iframe:!0,width:"802px",height:"772px",opacity:"0.7",className:"peermark_reviews",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(".messages_inbox").length>0&&$(".messages_inbox").colorbox({iframe:!0,width:"772px",height:"772px",opacity:"0.7",className:"messages",transition:"none",closeButton:!0,onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(".nonsubmitters_link").length>0&&$(".nonsubmitters_link").colorbox({iframe:!0,width:"740px",height:"540px",opacity:"0.7",className:"nonsubmitters",transition:"none",closeButton:!0,onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(".nonsubmittersformsuccessmsg").length>0&&(hideLoadingGif(),window.parent.$(".nonsubmitters").colorbox.resize({width:"740px",height:"120px"})),$(".rubric_view_launch").length>0&&$(".rubric_view_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(document).on("click",".default_open, .origreport_open, .grademark_open",function(){var i=!0,e=$(this).attr("id").split("_"),t=$("#date_due_"+e[2]).html(),s=moment(t).unix(),a=e[0],n=e[1],o=e[2];if(s>moment().unix()&&$(this).hasClass("graded_warning")&&(confirm(M.str.turnitintooltwo.resubmissiongradewarn)||(i=!1)),i){dvWindow=window.open("","_blank");var r='<div style="text-align:center;">';r+='<img src="'+M.cfg.wwwroot+'/mod/turnitintooltwo/pix/tiiIcon.svg" style="width:100px; height: 100px">',r+='<p style="font-family: Arial, Helvetica, sans-serif;">'+M.str.turnitintooltwo.loadingdv+"</p>",r+="</div>",$(dvWindow.document.body).html(r),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:a,submission:n,assignment:$("#assignment_id").html()},success:function(i){$(dvWindow.document.body).html(r+i),dvWindow.document.forms[0].submit(),dvWindow.document.close(),checkDVClosed(o)}})}}),$("#id_rubric, #id_plagiarism_rubric").length>0&&refreshRubricSelect(),self!=top&&"box"==$("#view_context").html()?$("html").css("background","none"):self!=top&&"box_solid"==$("#view_context").html()&&$("html").css("background","#FFF"),$(".editable_postdue").on("click",function(){1==$(this).data("anon")&&alert(M.str.turnitintooltwo.postdate_warning)}),$(".editable_text").length>0){$.fn.editable.defaults.mode="inline",$.fn.editable.defaults.url="ajax.php",$.fn.editable.defaults.onblur="submit",$.fn.editable.defaults.showbuttons=!1,$.fn.editable.defaults.ajaxOptions={dataType:"json"},$(".editable_text").editable({validate:function(i){if($(this).attr("id").indexOf("marks_")>=0&&(Math.floor(i)!=i||!$.isNumeric(i)||i.indexOf(".")!=-1))return M.str.turnitintooltwo.maxmarkserror},success:function(i,e){if(!i.success)return i.msg;if("maxmarks"==i.field)$("#refresh_"+i.partid).click(),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"sync_all_submissions",assignment:$("#assignment_id").html(),sesskey:M.cfg.sesskey}});else if("partname"==i.field){var t=$(this).parentsUntil(".ui-tabs-panel").parent().attr("aria-labelledby");$("#"+t).text(e)}}}),$("#export_options").hasClass("tii_export_options_hide")&&($("#export_options").hide(),$(".export_data").html('<span class="empty-dash">--</span>')),$(".editable_postdue").on("click",function(){var i=$(this);$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"check_anon",part:i.data("pk"),assignment:$("#assignment_id").html()},success:function(e){i.data("anon",e.anon),i.data("unanon",e.unanon),i.data("submitted",e.submitted)}})});var theDate=new Date;$(".editable_date").editable({type:"combodate",format:"YYYY-MM-DD HH:mm",viewformat:"D MMM YYYY, HH:mm",template:"D MMM YYYY  HH:mm",combodate:{minuteStep:1,minYear:2e3,maxYear:theDate.getFullYear()+2,smartDays:!0},validate:function(i){if(i.format("X")<moment().unix()&&$(this).hasClass("editable_postdue")&&1==$(this).data("anon")&&0==$(this).data("unanon")&&1==$(this).data("submitted")&&!confirm(M.str.turnitintooltwo.disableanonconfirm))return $(".editable-open").editableContainer("hide")," "},success:function(i,e){return i.success?($("#refresh_"+i.partid).click(),void("tii_export_options_hide"==i.export_option?($("#export_options").hide(),$(".export_data").html('<span class="empty-dash">--</span>')):($(".empty-dash").remove(),$("#export_options").show()))):i.msg}}),$(".editable_date").click(function(){if($(this).hasClass("editable-disabled"))return!1}),$(".editable_date, .editable_text").on("shown",function(i,e){var t=$(this).prop("id");$(".editable_date, .editable_text").not("#"+t).editable("disable"),$(".submit_nothing").addClass("disabled")}),$(".editable_date, .editable_text").on("hidden",function(){var i=$(this).prop("id");$(".editable_date, .editable_text").not("#"+i).editable("enable"),$(".submit_nothing").removeClass("disabled")})}$("#inbox_form form, .launch_form form").submit(),$(".turnitin_eula_link").length>0&&$(".turnitin_eula_link").colorbox({iframe:!0,width:"766px",height:"596px",opacity:"0.7",className:"eula_view",scrolling:"false",onLoad:function(){getLoadingGif()},onComplete:function(){$(window).on("message",function(i){var e="undefined"==typeof i.data?i.originalEvent.data:i.data;$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"acceptuseragreement",message:e,sesskey:M.cfg.sesskey},success:function(i){window.location.reload()},error:function(i){window.location.reload()}})})},onCleanup:function(){hideLoadingGif()}}),$("#tii_receipt_print").click(function(){
window.print()}),$(".select_all_checkbox").on("click",function(){var i=$(this).parent().parent().parent().parent().attr("id");$(this).is(":checked")?($("#"+i+" .inbox_checkbox").length&&$("#tabs-"+i+" .zip_downloads").slideDown(),$("#"+i+" .inbox_checkbox").each(function(){$(this).prop("checked",!0)})):($("#"+i+" .inbox_checkbox").each(function(){$(this).prop("checked",!1)}),$("#"+i+" .inbox_checkbox").length&&$("#tabs-"+i+" .zip_downloads").slideUp())}),$("[id^=fitem_id_dtpost] select").change(function(){var i=$(this).parent().parent().parent(),e=buildUnixDate("#fitem_id_dtpost",i.data("partId"));e<moment().unix()&&1==i.data("anon")&&0==i.data("unanon")&&1==i.data("submitted")&&alert(M.str.turnitintooltwo.anonalert)});var buildUnixDate=function(i,e){var t=["_day","_month","_year","_hour","_minute"];$this=$(i+e);var s="";return $.each(t,function(i,t){s+=$this.find("[id$="+e+t+"] option:selected").text(),"_year"===t?s+=" ":"_hour"===t?s+=":":"_minute"!==t&&(s+="-")}),moment(s,"DD-MMMM-YYYY hh:mm").unix()}})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR1cm5pdGludG9vbHR3by5qcyJdLCJuYW1lcyI6WyIkIiwid2luZG93Iiwib24iLCJlbmFibGVFZGl0aW5nVGV4dCIsInBhcnRfaWQiLCJlZGl0YWJsZSIsImRpc2FibGVFZGl0aW5nVGV4dCIsImdldExvYWRpbmdHaWYiLCJpbWciLCJhZnRlciIsInRvcCIsInNjcm9sbFRvcCIsImhlaWdodCIsImNzcyIsImhpZGVMb2FkaW5nR2lmIiwicmVtb3ZlIiwiZ2V0U3VibWlzc2lvbnMiLCJ0YWJsZSIsImFzc2lnbm1lbnRfaWQiLCJzdGFydCIsInJlZnJlc2hfcmVxdWVzdGVkIiwidG90YWwiLCJhamF4IiwiZGF0YVR5cGUiLCJ0eXBlIiwidXJsIiwiYXN5bmMiLCJkYXRhIiwiYWN0aW9uIiwiYXNzaWdubWVudCIsInBhcnQiLCJzZXNza2V5IiwiTSIsImNmZyIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJldmFsIiwiZW5kIiwiYWFEYXRhIiwibGVuZ3RoIiwiZm5BZGREYXRhIiwiYXR0ciIsImFsbHJlZnJlc2hlZCIsImVhY2giLCJrIiwidiIsImhpZGUiLCJzaG93Iiwic3VibWl0VmlzaWJpbGl0eSIsIm5vbnN1Ym1pdHRlcnMiLCJlcnJvciIsInJlc3BvbnNlIiwiaHRtbCIsInN0ciIsInR1cm5pdGludG9vbHR3byIsInRpaXN1Ym1pc3Npb25zZ2V0ZXJyb3IiLCJyZWZyZXNoUnVicmljU2VsZWN0IiwicnVicmljRWxlbWVudElkIiwiY3VycmVudFJ1YnJpYyIsInZhbCIsIm1vZHVsZW5hbWUiLCJjb3Vyc2UiLCJlbXB0eSIsIm9wdGlvbnMiLCJpIiwiaXNOdW1lcmljIiwiYXBwZW5kIiwidmFsdWUiLCJ0ZXh0Iiwib3B0Z3JvdXAiLCJqIiwicnVicmljIiwib3B0aW9uIiwicmVmcmVzaFVzZXJNZXNzYWdlcyIsInJlc2V0UGVlcm1hcmtTZWN0aW9uIiwicmVmcmVzaFBlZXJtYXJrQXNzaWdubWVudHMiLCJ1c2VyX3JvbGUiLCJwZWVybWFya190YWJsZSIsIm5vX29mX3BlZXJtYXJrcyIsInBlZXJtYXJrc19hY3RpdmUiLCJjb29raWUiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwiaW5pdGlhbGlzZVVuYW5veW1pc2VGb3JtIiwic2NvcGUiLCJzdWJtaXNzaW9uX2lkIiwiaWRlbnRpZmllciIsImNvbG9yYm94IiwiaW5saW5lIiwid2lkdGgiLCJvcGFjaXR5IiwiY2xhc3NOYW1lIiwib25Db21wbGV0ZSIsImlkU3RyIiwidGhpcyIsInNwbGl0IiwidW5kZWZpbmVkIiwidW5iaW5kIiwiY2xpY2siLCJyZWFzb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdGF0dXMiLCJjbG9zZSIsInd3d3Jvb3QiLCJ1c2VyaWQiLCJjb3Vyc2VpZCIsIm5hbWUiLCJyZW1vdmVDbGFzcyIsImN1cnJlbnRfbXNnIiwibXNnIiwib25DbGVhbnVwIiwiaW5pdGlhbGlzZVVwbG9hZEJveCIsInVzZXJfaWQiLCJjb2xvckJveFdpZHRoIiwiY29sb3JCb3hIZWlnaHQiLCJvbkxvYWQiLCJsaWdodEJveENsb3NlQnV0dG9uIiwib25DbG9zZWQiLCJyZWZyZXNoSW5ib3hSb3ciLCJpZnJhbWUiLCJ0cmFuc2l0aW9uIiwiaW5pdGlhbGlzZVppcERvd25sb2FkcyIsImRvd25sb2FkWmlwRmlsZSIsImRvY3VtZW50IiwiZSIsIm9wZW4iLCJocmVmIiwic3VibWlzc2lvbl9pZHMiLCJjbG9zZWJ1dHRvbiIsInNtYWxsVGlpQ2xvc2VCdXR0b24iLCJpbml0aWFsaXNlRGlnaXRhbFJlY2VpcHQiLCJpbml0aWFsaXNlSGlkZGVuWmlwRG93bmxvYWRzIiwiaW5pdGlhbGlzZVJlZnJlc2hSb3ciLCJzaWJsaW5ncyIsImFkZENsYXNzIiwicGFyZW50IiwiaW5pdGlhbGlzZURWTGF1bmNoZXJzIiwiY2hpbGRyZW4iLCJoYXNDbGFzcyIsImRvd25sb2FkT3JpZ2luYWxGaWxlIiwiZG93bmxvYWR0eXBlIiwic3VibWl0IiwiZHZ0eXBlIiwic3VibWlzc2lvbiIsImNoZWNrRFZDbG9zZWQiLCJkdldpbmRvdyIsImNsb3NlZCIsInNldFRpbWVvdXQiLCJzdWJtaXROb3RoaW5nIiwidXNlciIsImV4cGlyZXMiLCJhbGVydCIsInJlc3BvbnNlVGV4dCIsImNvbXBsZXRlIiwibGluayIsIm9UYWJsZSIsImRhdGFUYWJsZSIsInRyIiwicm93aW5kZXgiLCJpbmRleCIsImZuRGVsZXRlUm93Iiwicm93IiwiaW5pdGlhbGlzZUNoZWNrYm94ZXMiLCJzaG93UGFydERhdGVzQm94ZXMiLCJpcyIsInJlbW92ZUF0dHIiLCJjb25maXJtc3RybmFtZSIsImNvbmZpcm1zdHIiLCJyZXBsYWNlIiwiY29uZmlybXJlc3VsdCIsImNvbmZpcm0iLCJwYXBlciIsImxvY2F0aW9uIiwicHJvcCIsInN0dWRlbnRfaWQiLCJtZXNzYWdlIiwic3VibWl0bm90aGluZ3dhcm5pbmciLCJjb29raWVzZWVuIiwiZXZlbnQiLCJub2RlIiwidGFyZ2V0IiwiaXNBc2NlbmRpbmciLCJjdXJyZW50c29ydCIsInNvcnRieSIsInNvcnRDb2x1bW4iLCJjbG9zZXN0IiwiRGF0YVRhYmxlIiwib3JkZXIiLCJkcmF3IiwiZGF0YVRhYmxlc0xhbmciLCJzUHJvY2Vzc2luZyIsInNwcm9jZXNzaW5nIiwic1plcm9SZWNvcmRzIiwic3plcm9yZWNvcmRzIiwic0luZm8iLCJzaW5mbyIsInNTZWFyY2giLCJzc2VhcmNoIiwic0xlbmd0aE1lbnUiLCJzbGVuZ3RobWVudSIsIm9QYWdpbmF0ZSIsInNOZXh0Iiwic25leHQiLCJzUHJldmlvdXMiLCJzcHJldmlvdXMiLCJhY3RpdmVUYWIiLCJ0YWJzIiwiYWN0aXZlIiwiZm4iLCJmblRhYmxlcyIsImZuQWRqdXN0Q29sdW1uU2l6aW5nIiwiYlByb2Nlc3NpbmciLCJzQWpheFNvdXJjZSIsImFvQ29sdW1uRGVmcyIsImJTb3J0YWJsZSIsInNDbGFzcyIsImFUYXJnZXRzIiwib0xhbmd1YWdlIiwiZm5TZXJ2ZXJEYXRhIiwic1NvdXJjZSIsImFvRGF0YSIsImZuQ2FsbGJhY2siLCJyb2xlIiwibWVtYmVyY2hlY2tlcnJvciIsInN1Ym1pc3Npb25zRGF0YVRhYmxlQ29sdW1ucyIsInZpc2libGVDb2xzIiwibm9PZkNvbHVtbnMiLCJub3RTdHVkZW50VmlldyIsInNob3dPcmlnUmVwb3J0IiwidXNlR3JhZGVNYXJrIiwibXVsdGlwbGVQYXJ0cyIsInB1c2giLCJzVHlwZSIsImJWaXNpYmxlIiwiaURhdGFTb3J0IiwicGFydFRhYmxlcyIsInJlZnJlc2hSZXF1ZXN0ZWQiLCJhb0NvbHVtbnMiLCJhTGVuZ3RoTWVudSIsImFhU29ydGluZyIsInNEb20iLCJiU3RhdGVTYXZlIiwiZm5TdGF0ZVNhdmUiLCJvU2V0dGluZ3MiLCJvRGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZm5TdGF0ZVNhdmVQYXJhbXMiLCJhYlZpc0NvbHMiLCJmblN0YXRlTG9hZCIsInBhcnNlIiwiZ2V0SXRlbSIsImZuU3RhdGVMb2FkUGFyYW1zIiwiZm5EcmF3Q2FsbGJhY2siLCJ0aWlfdGFibGVfZnVuY3Rpb25zIiwiemlwX2Rvd25sb2FkcyIsImZuUmVsb2FkQWpheCIsImZuU3RhbmRpbmdSZWRyYXciLCJyZXNpemUiLCJtb3VzZWRvd24iLCJjaGFuZ2VydWJyaWN3YXJuaW5nIiwiY2xvc2VCdXR0b24iLCJwcm9jZWVkIiwiZHVlX2RhdGUiLCJkdWVfZGF0ZV91bml4IiwibW9tZW50IiwidW5peCIsInJlc3VibWlzc2lvbmdyYWRld2FybiIsImxvYWRpbmciLCJsb2FkaW5nZHYiLCJib2R5IiwiZm9ybXMiLCJzZWxmIiwicG9zdGRhdGVfd2FybmluZyIsImRlZmF1bHRzIiwibW9kZSIsIm9uYmx1ciIsInNob3didXR0b25zIiwiYWpheE9wdGlvbnMiLCJ2YWxpZGF0ZSIsImluZGV4T2YiLCJNYXRoIiwiZmxvb3IiLCJtYXhtYXJrc2Vycm9yIiwibmV3VmFsdWUiLCJmaWVsZCIsInBhcnRpZCIsInRhYklkIiwicGFyZW50c1VudGlsIiwiJHRoaXMiLCJ0aGVEYXRlIiwiRGF0ZSIsImZvcm1hdCIsInZpZXdmb3JtYXQiLCJ0ZW1wbGF0ZSIsImNvbWJvZGF0ZSIsIm1pbnV0ZVN0ZXAiLCJtaW5ZZWFyIiwibWF4WWVhciIsImdldEZ1bGxZZWFyIiwic21hcnREYXlzIiwiZGlzYWJsZWFub25jb25maXJtIiwiZWRpdGFibGVDb250YWluZXIiLCJleHBvcnRfb3B0aW9uIiwiY3VycmVudCIsIm5vdCIsInNjcm9sbGluZyIsImV2Iiwib3JpZ2luYWxFdmVudCIsInJlbG9hZCIsInByaW50IiwiaWQiLCJjaGFuZ2UiLCJkYXRhRWwiLCJwb3N0X2RhdGUiLCJidWlsZFVuaXhEYXRlIiwiYW5vbmFsZXJ0IiwiZWwiLCJkYXRlIiwiZmluZCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBV0EsR0FDUEEsRUFBRUMsUUFBUUMsR0FBRyxPQUFRLFdBazJCakIsUUFBU0MsbUJBQWtCQyxHQUN2QkosRUFBRSxTQUFXSSxFQUFVLDBCQUE0QkEsRUFBVSxtQkFBbUJDLFNBQVMsVUFJN0YsUUFBU0Msb0JBQW1CRixHQUN4QkosRUFBRSxTQUFXSSxFQUFVLDBCQUE0QkEsRUFBVSxtQkFBbUJDLFNBQVMsV0FHN0YsUUFBU0UsaUJBQ0wsR0FBSUMsR0FBTSxpQ0FDVlIsR0FBRSxnQkFBZ0JTLE1BQU1ELEVBQ3hCLElBQUlFLEdBQU1WLEVBQUVDLFFBQVFVLFlBQWVYLEVBQUVDLFFBQVFXLFNBQVcsQ0FDeERaLEdBQUUsZ0JBQWdCYSxJQUFJLE1BQU9ILEVBQU0sTUFHdkMsUUFBU0ksa0JBQ0xkLEVBQUUsZ0JBQWdCZSxTQUd0QixRQUFTQyxnQkFBZUMsTUFBT0MsY0FBZWQsUUFBU2UsTUFBT0Msa0JBQW1CQyxPQUM3RXJCLEVBQUVzQixNQUNFQyxTQUFZLE9BQ1pDLEtBQVEsT0FDUkMsSUFBTyxXQUNQQyxPQUFTLEVBQ1RDLE1BQ0lDLE9BQVEsa0JBQW1CQyxXQUFZWCxjQUFlWSxLQUFNMUIsUUFBU2UsTUFBT0EsTUFDNUVDLGtCQUFtQkEsa0JBQWtCaEIsU0FBVTJCLFFBQVNDLEVBQUVDLElBQUlGLFFBQVNWLE1BQU9BLE9BRWxGYSxRQUFXLFNBQVVDLFFBUWpCLEdBUEFDLEtBQUtELFFBQ0xoQixNQUFRZ0IsT0FBT0UsSUFFWEYsT0FBT0csT0FBT0MsT0FBUyxHQUN2QnRCLE1BQU11QixVQUFVTCxPQUFPRyxRQUd2QkgsT0FBT0UsSUFBTUYsT0FBT2QsTUFDcEJMLGVBQWVDLE1BQU9DLGNBQWVkLFFBQVNlLE1BQU9DLGtCQUFtQmUsT0FBT2QsV0FDNUUsQ0FDSHJCLEVBQUUsSUFBTUksUUFBVSxlQUFlcUMsS0FBSyxRQUFTLHNCQUUvQ3JCLGtCQUFrQmhCLFNBQVcsQ0FDN0IsSUFBSXNDLGNBQWUsQ0FFbkIxQyxHQUFFMkMsS0FBS3ZCLGtCQUFtQixTQUFVd0IsRUFBR0MsR0FDMUIsR0FBTEEsSUFDQUgsYUFBZSxLQUlILEdBQWhCQSxlQUNBMUMsRUFBRSxvQkFBb0I4QyxPQUN0QjlDLEVBQUUsaUJBQWlCK0MsUUFHdkJDLG1CQUVBN0Msa0JBQWtCQyxTQUdkK0IsT0FBT2MsY0FBZ0IsR0FDdkJqRCxFQUFFLHVCQUF1QnlDLEtBQUssUUFBUyxvQkFJbkRTLE1BQVMsU0FBVXZCLEVBQU13QixHQUNyQm5ELEVBQUUsSUFBTUksUUFBVSxlQUFlcUMsS0FBSyxRQUFTLHNCQUMvQ3pDLEVBQUUscUJBQXFCb0QsS0FBS3BCLEVBQUVxQixJQUFJQyxnQkFBZ0JDLDJCQU05RCxRQUFTUCxvQkFDc0MsR0FBdENoRCxFQUFFLGVBQWUyQixLQUFLLGNBQXdELEdBQWpDM0IsRUFBRSxlQUFlMkIsS0FBSyxRQUNwRTNCLEVBQUUsZUFBZStDLE9BR2pCL0MsRUFBRSxlQUFlOEMsT0FLekIsUUFBU1UsdUJBQ0wsR0FBSUMsR0FBbUJ6RCxFQUFFLGNBQW9CLE9BQUksYUFBZSx3QkFDNUQwRCxFQUFnQjFELEVBQUV5RCxHQUFpQkUsS0FDdkMzRCxHQUFFc0IsTUFDRUMsU0FBWSxPQUNaQyxLQUFRLE9BQ1JDLElBQU8sa0NBQ1BFLE1BQ0lDLE9BQVEsd0JBQXlCQyxXQUFZN0IsRUFBRSwwQkFBMEIyRCxNQUN6RUMsV0FBWTVELEVBQUUsNEJBQTRCMkQsTUFBT0UsT0FBUTdELEVBQUUsd0JBQXdCMkQsT0FFdkZ6QixRQUFTLFNBQVVQLEdBQ2YzQixFQUFFQSxFQUFFeUQsSUFBa0JLLE9BQ3RCLElBQUlDLEdBQVVwQyxDQUNkM0IsR0FBRTJDLEtBQUtvQixFQUFTLFNBQVVDLEVBQUdMLEdBQ3pCLEdBQUszRCxFQUFFaUUsVUFBVUQsSUFBWSxLQUFOQSxFQWdCbkJoRSxFQUFFQSxFQUFFeUQsSUFBa0JTLE9BQU9sRSxFQUFFLFlBQzNCbUUsTUFBT0gsRUFDUEksS0FBTVQsU0FsQm1CLENBRTdCLEdBQUlVLEdBQVdyRSxFQUFFLGFBQ2pCcUUsR0FBUzVCLEtBQUssUUFBU3VCLEdBRXZCaEUsRUFBRTJDLEtBQUtnQixFQUFLLFNBQVVXLEVBQUdDLEdBQ3JCLEdBQUlDLEdBQVN4RSxFQUFFLG9CQUNmd0UsR0FBT2IsSUFBSVcsR0FDWEUsRUFBT0osS0FBS0csR0FFWkYsRUFBU0gsT0FBT00sS0FHcEJ4RSxFQUFFeUQsR0FBaUJTLE9BQU9HLE1BVWxDckUsRUFBRXlELEVBQWtCLGtCQUFvQkMsRUFBZ0IsTUFBTWpCLEtBQUssV0FBWSxlQU0zRixRQUFTZ0MsdUJBQ0x6RSxFQUFFLHFCQUFxQitDLE9BQ3ZCL0MsRUFBRSxvQkFBb0JvRCxLQUFLLElBRTNCcEQsRUFBRXNCLE1BQ0VDLFNBQVksT0FDWkMsS0FBUSxPQUNSQyxJQUFPLFdBQ1BFLE1BQVVDLE9BQVEsd0JBQXlCQyxXQUFZN0IsRUFBRSxrQkFBa0JvRCxRQUMzRWxCLFFBQVMsU0FBVVAsR0FDZjNCLEVBQUUscUJBQXFCOEMsT0FDdkI5QyxFQUFFLG9CQUFvQm9ELEtBQUt6QixNQU12QyxRQUFTK0Msc0JBQXFCdEUsR0FDMUJKLEVBQUUsU0FBV0ksRUFBVSxzQkFBc0IwQyxPQUM3QzlDLEVBQUUsU0FBV0ksRUFBVSxvQkFBb0JnRCxLQUFLLElBQ2hEcEQsRUFBRSxTQUFXSSxFQUFVLHNCQUFzQjJDLE9BQzdDL0MsRUFBRSxTQUFXSSxFQUFVLG9DQUFvQzBDLE9BSS9ELFFBQVM2Qiw0QkFBMkJ2RSxRQUFTZ0IsbUJBRXpDLEdBQUl3RCxXQUFhNUUsRUFBRSxnQ0FBZ0N1QyxPQUFTLEVBQUssYUFBZSxTQUU1RXZDLEdBQUUsU0FBV0ksUUFBVSxvQ0FBb0NtQyxPQUFTLElBRXBFbUMscUJBQXFCdEUsU0FFckJKLEVBQUVzQixNQUNFQyxTQUFZLE9BQ1pDLEtBQVEsT0FDUkMsSUFBTyxXQUNQRSxNQUNJQyxPQUFRLCtCQUFnQ0MsV0FBWTdCLEVBQUUsa0JBQWtCb0QsT0FDeEV0QixLQUFNMUIsUUFBU2dCLGtCQUFtQkEsa0JBQW1CVyxRQUFTQyxFQUFFQyxJQUFJRixTQUV4RUcsUUFBUyxTQUFVUCxNQUNmUyxLQUFLVCxNQUNMM0IsRUFBRSxTQUFXSSxRQUFVLG9DQUFvQ2dELEtBQUt6QixLQUFLa0QsZ0JBRXJFN0UsRUFBRSxTQUFXSSxRQUFVLHNCQUFzQjBDLE9BQzdDOUMsRUFBRSxTQUFXSSxRQUFVLG9CQUFvQmdELEtBQUt6QixLQUFLbUQsaUJBRWpEbkQsS0FBS21ELGdCQUFrQixFQUN2QjlFLEVBQUUsU0FBV0ksUUFBVSxzQkFBc0IyQyxPQUU3Qy9DLEVBQUUsU0FBV0ksUUFBVSxzQkFBc0IwQyxRQUc1Q25CLEtBQUttRCxnQkFBa0IsR0FBa0IsY0FBYkYsV0FBK0JqRCxLQUFLb0Qsa0JBQWlDLFdBQWJILFlBQ3JGNUUsRUFBRSxTQUFXSSxRQUFVLDBCQUEwQjJDLE9BR1csUUFBNUQvQyxFQUFFZ0YsT0FBTyxrQkFBb0JoRixFQUFFLGtCQUFrQm9ELFNBQXFCekIsS0FBS21ELGdCQUFrQixHQUM3RjlFLEVBQUUsbUJBQXFCQSxFQUFFLGtCQUFrQm9ELFFBQVFOLE9BQ25EOUMsRUFBRSxtQkFBcUJBLEVBQUUsa0JBQWtCb0QsUUFBUUwsT0FDbkQvQyxFQUFFLG1DQUFtQ2lGLGNBRXJDakYsRUFBRSxtQkFBcUJBLEVBQUUsa0JBQWtCb0QsUUFBUUwsT0FDbkQvQyxFQUFFLG1CQUFxQkEsRUFBRSxrQkFBa0JvRCxRQUFRTixPQUNuRDlDLEVBQUUsbUNBQW1Da0YsZUFRekQsUUFBU0MsMEJBQXlCQyxNQUFPbEUsY0FBZW1FLGVBQ3BELEdBQUlDLFlBQWEsZUFDSixRQUFURixRQUNBRSxXQUFhLGVBQWlCRCxlQUVsQ3JGLEVBQUVzRixZQUFZQyxVQUNWQyxRQUFRLEVBQU1DLE1BQU8sTUFBTy9FLElBQUssUUFBU0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLDhCQUN0RkMsV0FBWSxXQUNSLEdBQUlDLE9BQVE3RixFQUFFOEYsTUFBTXJELEtBQUssTUFBTXNELE1BQU0sSUFDckMsSUFBcUIsR0FBakJWLGVBQXVDVyxRQUFqQlgsY0FDdEIsR0FBSUEsZUFBZ0JRLE1BQU0sRUFFVCxJQUFqQjNFLGdCQUNBQSxjQUFnQmxCLEVBQUUsa0JBQWtCb0QsUUFFeENwRCxFQUFFLGtCQUFrQm9ELEtBQUtpQyxlQUN6QnJGLEVBQUUsd0NBQXdDK0MsT0FDMUMvQyxFQUFFLGNBQWNpRyxPQUFPLFNBQ3ZCakcsRUFBRSxjQUFja0csTUFBTSxXQUNsQmxHLEVBQUVzQixNQUNFQyxTQUFZLE9BQ1pDLEtBQVEsT0FDUkMsSUFBTyxXQUNQRSxNQUNJQyxPQUFRLHlCQUEwQkMsV0FBWVgsY0FBZW1FLGNBQWVBLGNBQzVFYyxPQUFRQyxtQkFBbUJwRyxFQUFFLCtCQUErQjJELE9BQVE1QixRQUFTQyxFQUFFQyxJQUFJRixTQUV2RkcsUUFBUyxTQUFVUCxNQUVmLEdBREFTLEtBQUtULE1BQ2MsV0FBZkEsS0FBSzBFLE9BQ0xyRyxFQUFFdUYsU0FBU2UsUUFDWHRHLEVBQUUsZUFBaUJxRixlQUFlNUMsS0FBSyxPQUFRVCxFQUFFQyxJQUFJc0UsUUFBVSxxQkFBdUI1RSxLQUFLNkUsT0FBUyxXQUFhN0UsS0FBSzhFLFVBQ3RIekcsRUFBRSxlQUFpQnFGLGVBQWVqQyxLQUFLekIsS0FBSytFLE1BQzVDMUcsRUFBRSxlQUFpQnFGLGVBQWVzQixZQUFZLCtCQUMzQyxDQUNILEdBQUlDLGFBQWM1RyxFQUFFLHFCQUFxQm9ELElBQ3pDcEQsR0FBRSxxQkFBcUJvRCxLQUFLd0QsWUFBYyxJQUFNakYsS0FBS2tGLFlBTXpFQyxVQUFXLFdBQ1A5RyxFQUFFLHFCQUFxQjhDLFVBS25DLFFBQVNpRSxxQkFBb0IzQixFQUFPQyxFQUFlakYsRUFBUzRHLEdBQ3hELEdBQUkxQixHQUFhLGFBQ0osUUFBVEYsSUFDQUUsRUFBYSxXQUFhRCxFQUFnQixJQUFNakYsRUFBVSxJQUFNNEcsRUFHcEUsSUFBSUMsR0FBZ0IsTUFDaEJDLEVBQWlCLEtBRXJCbEgsR0FBRXNGLEdBQVlDLFVBQ1Y0QixPQUFRLFdBQ0o1RyxnQkFDQTZHLHNCQUNBcEgsRUFBRThGLE1BQU1oRCxRQUVadUUsU0FBVSxXQUFjdkcsa0JBQ3hCZ0csVUFBVyxXQUNQaEcsZ0JBQ0EsSUFBSStFLEdBQVE3RixFQUFFOEYsTUFBTXJELEtBQUssTUFBTXNELE1BQU0sSUFDckN1QixpQkFBZ0IsU0FBVXpCLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLElBRXBEN0YsRUFBRSxrQkFBa0JlLFVBRXhCd0csUUFBUSxFQUFNOUIsTUFBT3dCLEVBQWVyRyxPQUFRc0csRUFBZ0J4QixRQUFTLE1BQU9DLFVBQVcsU0FBVTZCLFdBQVksU0FRckgsUUFBU0Msd0JBQXVCckgsR0FFNUJKLEVBQUUsU0FBV0ksRUFBVSwwQkFBNEJBLEVBQVUseUJBQTJCQSxFQUFVLG9CQUFvQjZGLE9BQU8sU0FHN0hqRyxFQUFFLFNBQVdJLEVBQVUsMEJBQTRCQSxFQUFVLHlCQUEyQkEsRUFBVSxvQkFBb0I4RixNQUFNLFdBQ3hILEdBQUlMLEdBQVE3RixFQUFFOEYsTUFBTXJELEtBQUssTUFBTXNELE1BQU0sSUFDckMyQixpQkFBZ0I3QixFQUFNLEdBQUssSUFBTUEsRUFBTSxHQUFJQSxFQUFNLE1BSXJEN0YsRUFBRSxTQUFXSSxFQUFVLHFCQUFxQm1GLFVBQ3hDZ0MsUUFBUSxFQUFNOUIsTUFBTyxNQUFPN0UsT0FBUSxNQUFPOEUsUUFBUyxNQUFPQyxVQUFXLHFCQUFzQjZCLFdBQVksT0FDeEdMLE9BQVEsV0FDSkMsc0JBQ0E3RyxpQkFFSnVHLFVBQVcsV0FDUDlHLEVBQUUsa0JBQWtCZSxTQUNwQkQsa0JBRUp1RyxTQUFVLFdBQ041Qyx5QkFLUnpFLEVBQUUySCxVQUFVekgsR0FBRyxRQUFTLFNBQVdFLEVBQVUsaUJBQWtCLFNBQVV3SCxHQW9CckUsTUFuQkE1SCxHQUFFOEYsTUFBTVAsVUFDSnNDLE1BQU0sRUFBTU4sUUFBUSxFQUFNOUIsTUFBTyxRQUFTN0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLGtCQUFtQjZCLFdBQVksT0FDckhNLEtBQU0sV0FDRixHQUFJQyxHQUFpQixFQVFyQixPQUxBL0gsR0FBRSxTQUFXSSxFQUFVLDRCQUE0QnVDLEtBQUssU0FBVXFCLEdBQzlEK0QsR0FBa0IsaUJBQW1CL0QsRUFBSSxJQUFNaEUsRUFBRThGLE1BQU1uQyxNQUN2REssTUFHR2hFLEVBQUU4RixNQUFNckQsS0FBSyxRQUFVc0YsR0FFbENaLE9BQVEsV0FBYzVHLGlCQUN0QnVHLFVBQVcsV0FBY2hHLGtCQUN6QnVHLFNBQVUsV0FDTjVDLDBCQUdELElBSWYsUUFBUzJDLHVCQUNMcEgsRUFBRSxRQUFRa0UsT0FBTywrRkFBaUdsQyxFQUFFcUIsSUFBSUMsZ0JBQWdCMEUsWUFBYyxjQUcxSixRQUFTQyx1QkFDTGpJLEVBQUUsUUFBUWtFLE9BQU8sd0dBQTBHbEMsRUFBRXFCLElBQUlDLGdCQUFnQjBFLFlBQWMsY0FJbkssUUFBU0UsNEJBQ0RsSSxFQUFFLHdCQUF3QnVDLE9BQVMsR0FDbkN2QyxFQUFFLHdCQUF3QnVGLFVBQ3RCZ0MsUUFBUSxFQUFNOUIsTUFBTyxRQUFTN0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLGNBQWU2QixXQUFZLE9BQ3JHTCxPQUFRLFdBQ0pDLHNCQUNBN0csaUJBRUp1RyxVQUFXLFdBQ1A5RyxFQUFFLGtCQUFrQmUsU0FDcEJELG9CQVVoQixRQUFTcUgsOEJBQTZCL0gsR0FFbENKLEVBQUUsU0FBV0ksRUFBVSwwQkFBMEI2RixPQUFPLFNBRXhEakcsRUFBRSxTQUFXSSxFQUFVLDBCQUEwQjhGLE1BQU0sV0FDbkQsR0FBSUwsR0FBUTdGLEVBQUU4RixNQUFNckQsS0FBSyxNQUFNc0QsTUFBTSxJQUVyQyxPQURBMkIsaUJBQWdCN0IsRUFBTSxHQUFLLElBQU1BLEVBQU0sR0FBSXpGLElBQ3BDLElBSWYsUUFBU2dJLHNCQUFxQmhELEVBQU9DLEVBQWVqRixFQUFTNEcsR0FDekQsR0FBSTFCLEdBQWEsMEJBQ0osUUFBVEYsSUFDQUUsRUFBYSxlQUFpQkQsRUFBZ0IsSUFBTWpGLEVBQVUsSUFBTTRHLEVBQVUsZ0JBSWxGaEgsRUFBRXNGLEdBQVlXLE9BQU8sU0FFckJqRyxFQUFFc0YsR0FBWVksTUFBTSxXQUNoQmxHLEVBQUU4RixNQUFNaEQsT0FDUjlDLEVBQUU4RixNQUFNdUMsU0FBUyxlQUFleEgsSUFBSSxVQUFXLGdCQUFnQnlILFNBQVMsUUFDeEUsSUFBSXpDLEdBQVE3RixFQUFFOEYsTUFBTXlDLFNBQVM5RixLQUFLLE1BQU1zRCxNQUFNLElBQzlDdUIsaUJBQWdCekIsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxNQUs1RCxRQUFTMkMsdUJBQXNCcEQsRUFBT0MsRUFBZWpGLEVBQVM0RyxHQUMxRCxHQUFJMUIsR0FBYSxJQUFNbEYsRUFBVSwwQkFDcEIsUUFBVGdGLElBQ0FFLEVBQWEscUJBQXVCRCxFQUFnQixJQUFNakYsRUFBVSxJQUFNNEcsR0FJOUVoSCxFQUFFc0YsR0FBWVcsT0FBTyxTQUVyQmpHLEVBQUVzRixHQUFZWSxNQUFNLFdBQ2hCLEdBQUlMLEdBQVE3RixFQUFFOEYsTUFBTXJELEtBQUssTUFBTXNELE1BQU0sSUFFaEMvRixHQUFFOEYsTUFBTTJDLFNBQVMsaUJBQWlCQyxTQUFTLGtCQUM1Q0MscUJBQXFCOUMsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxNQU9yRSxRQUFTNkIsaUJBQWdCa0IsRUFBY3hJLEdBQ25DLEdBQUkySCxLQUVnQixvQkFBaEJhLEdBQXFELGFBQWhCQSxHQUNyQzVJLEVBQUUsU0FBV0ksRUFBVSw0QkFBNEJ1QyxLQUFLLFNBQVVxQixHQUM5RCtELEVBQWUvRCxHQUFLaEUsRUFBRThGLE1BQU1uQyxRQUlwQzNELEVBQUVzQixNQUNFRSxLQUFNLE9BQ05DLElBQUssV0FDTEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRZ0gsRUFBYy9HLFdBQVk3QixFQUFFLGtCQUFrQm9ELE9BQVF0QixLQUFNMUIsRUFBUzJILGVBQWdCQSxHQUNyRzdGLFFBQVMsU0FBVVAsR0FDZjNCLEVBQUUsSUFBTTRJLEVBQWUsU0FBV3hJLEdBQVNnRCxLQUFLekIsR0FDaEQzQixFQUFFLElBQU00SSxFQUFlLFNBQVd4SSxHQUFTcUksU0FBUyxRQUFRSSxTQUM1RDdJLEVBQUUsSUFBTTRJLEVBQWUsU0FBV3hJLEdBQVNnRCxLQUFLLE9BTzVELFFBQVN1RixzQkFBcUJHLEVBQVF6RCxFQUFlakYsRUFBUzRHLEdBRTFEaEgsRUFBRXNCLE1BQ0VFLEtBQU0sT0FDTkMsSUFBS08sRUFBRUMsSUFBSXNFLFFBQVUsZ0NBQ3JCaEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRa0gsRUFBUUMsV0FBWTFELEVBQWV4RCxXQUFZN0IsRUFBRSxrQkFBa0JvRCxRQUNuRmxCLFFBQVMsU0FBVVAsR0FDZjNCLEVBQUUsSUFBTThJLEVBQVMsU0FBV3pELEdBQWVqQyxLQUFLekIsR0FDaEQzQixFQUFFLElBQU04SSxFQUFTLFNBQVd6RCxHQUFlb0QsU0FBUyxRQUFRSSxTQUM1RDdJLEVBQUUsSUFBTThJLEVBQVMsU0FBV3pELEdBQWVqQyxLQUFLLE9BTTVELFFBQVM0RixlQUFjNUksR0FDZkgsT0FBT2dKLFNBQVNDLE9BQ2hCbEosRUFBRSxZQUFjSSxHQUFTOEYsUUFFekJpRCxXQUFXLFdBQ1BILGNBQWM1SSxJQUNmLEtBS1gsUUFBU2dKLGVBQWNwQyxRQUFTNUcsU0FDNUJKLEVBQUUsb0JBQXNCSSxRQUFVLElBQU00RyxRQUFVLE1BQU12RSxLQUFLLFFBQVMsK0JBQ3RFekMsRUFBRXNCLE1BQ0VFLEtBQU0sT0FDTkMsSUFBSyxXQUNMRixTQUFVLE9BQ1ZJLE1BQ0lDLE9BQVEsaUJBQWtCQyxXQUFZN0IsRUFBRSxrQkFBa0JvRCxPQUMxRHRCLEtBQU0xQixRQUFTaUosS0FBTXJDLFFBQVNqRixRQUFTQyxFQUFFQyxJQUFJRixTQUVqREcsUUFBUyxTQUFVUCxNQUNmUyxLQUFLVCxNQUNMM0IsRUFBRWdGLE9BQU8sdUJBQXVCLEdBQVFzRSxRQUFTLE1BQ2pEdEosRUFBRSxTQUFXSSxRQUFVLHlCQUF5QnFDLEtBQUssV0FBVyxJQUVwRVMsTUFBTyxTQUFVdkIsR0FDYjNCLEVBQUUsb0JBQXNCSSxRQUFVLElBQU00RyxRQUFVLE1BQU12RSxLQUFLLFFBQVMsc0JBQ3RFekMsRUFBRSxvQkFBc0JJLFFBQVUsSUFBTTRHLFNBQVNMLFlBQVksWUFDN0Q0QyxNQUFNNUgsRUFBSzZILGVBRWZDLFNBQVUsV0FDTm5DLGdCQUFnQixnQkFBaUIsRUFBR2xILFFBQVM0RyxZQU16RCxRQUFTTSxpQkFBZ0JvQyxLQUFNckUsY0FBZWpGLFFBQVM0RyxTQUNuRGhILEVBQUVzQixNQUNFRSxLQUFNLE9BQ05DLElBQUssV0FDTEYsU0FBVSxPQUNWSSxNQUNJQyxPQUFRLHlCQUEwQkMsV0FBWTdCLEVBQUUsa0JBQWtCb0QsT0FDbEV0QixLQUFNMUIsUUFBU2lKLEtBQU1yQyxRQUFTakYsUUFBU0MsRUFBRUMsSUFBSUYsU0FFakRHLFFBQVMsU0FBVVAsTUFDZjNCLEVBQUUsU0FBV0ksUUFBVSx5QkFBeUJxQyxLQUFLLFdBQVcsR0FDaEVMLEtBQUtULEtBQ0wsSUFBSXFDLEdBQUksQ0FDYSxJQUFqQnFCLGVBQ0FxRSxNQUFRLEtBQ1JyRSxjQUFnQjFELEtBQUswRCxlQUVyQnFFLEtBRDZCLE1BQXRCL0gsS0FBSzBELGVBQTBDLEdBQWpCQSxjQUM5QnFFLEtBQU8sSUFBTXJFLGNBRWJxRSxLQUFPLElBQU0vSCxLQUFLMEQsY0FHUixHQUFqQkEsZUFDQXJGLEVBQUUsaUJBQWlCMkcsWUFBWSxnQkFJbkNnRCxPQUFTM0osRUFBRSxTQUFXSSxTQUFTd0osV0FDL0IsSUFBSUMsSUFBSzdKLEVBQUUsSUFBTTBKLEtBQU8sSUFBTXRKLFFBQVUsSUFBTTRHLFNBQVN1QixTQUFTQSxTQUM1RHVCLFNBQVdELEdBQUdFLE9BQ2xCSixRQUFPSyxZQUFZSCxJQUNuQkYsT0FBT25ILFVBQVViLEtBQUtzSSxLQUV0QmpILG1CQUVBK0Qsb0JBQW9CLE1BQU9wRixLQUFLMEQsY0FBZWpGLFFBQVM0RyxTQUN4RHdCLHNCQUFzQixNQUFPN0csS0FBSzBELGNBQWVqRixRQUFTNEcsU0FDMURvQixxQkFBcUIsTUFBT3pHLEtBQUswRCxjQUFlakYsUUFBUzRHLFNBQ3pEa0QscUJBQXFCdkksS0FBSzBELGNBQWVqRixTQUN6QytFLHlCQUF5QixNQUFPbkYsRUFBRSxrQkFBa0JvRCxPQUFRekIsS0FBSzBELGtCQU03RSxRQUFTNkUsc0JBQXFCN0UsRUFBZWpGLEdBQ3pDLEdBQUlrRixHQUFhLFNBQVdsRixFQUFVLGtCQUNqQixJQUFqQmlGLElBQ0FDLEVBQWEsU0FBV0QsR0FHNUJyRixFQUFFLFNBQVdJLEVBQVUsb0JBQW9COEYsTUFBTSxXQUM3Q2xHLEVBQUUsU0FBV0ksRUFBVSx5QkFBeUJxQyxLQUFLLFdBQVcsS0FHcEV6QyxFQUFFMkgsVUFBVXpILEdBQUcsUUFBU29GLEVBQWEseUJBQTBCLFdBQ3ZEdEYsRUFBRSxTQUFXSSxFQUFVLDRCQUE0Qm1DLE9BQVMsR0FDNUR2QyxFQUFFLFNBQVdJLEVBQVUsbUJBQW1CNkUsWUFDMUNrRCw2QkFBNkIvSCxLQUU3QkosRUFBRSxTQUFXSSxFQUFVLDBCQUEwQjZGLE9BQU8sU0FDeERqRyxFQUFFLFNBQVdJLEVBQVUsbUJBQW1COEUsYUFNdEQsUUFBU2lGLHNCQUNMLElBQUssR0FBSW5HLEdBQUksRUFBR0EsR0FBSyxFQUFHQSxJQUNoQkEsR0FBS2hFLEVBQUUsZ0JBQWdCMkQsTUFDdkIzRCxFQUFFLDBCQUE0QmdFLEVBQUksTUFBTWlCLFlBRXhDakYsRUFBRSwwQkFBNEJnRSxFQUFJLE1BQU1rQixVQTNyQ3BELEdBdE5BbEYsRUFBRSxnQkFBZ0IrQyxPQUNsQi9DLEVBQUUsWUFBWThDLE9BR3VCLEdBQWpDOUMsRUFBRSxzQkFBc0IyRCxPQUN4QjNELEVBQUUsc0JBQXNCdUksU0FBU0EsU0FBU3pGLE9BR1QsR0FBakM5QyxFQUFFLHNCQUFzQjJELE9BQ3hCM0QsRUFBRSxzQkFBc0J1SSxTQUFTQSxTQUFTekYsT0FJekM5QyxFQUFFLDJCQUFpQyxRQUNwQ0EsRUFBRSxvQkFBb0J5QyxLQUFLLFdBQVksWUFJM0N6QyxFQUFFLDJCQUEyQkUsR0FBRyxRQUFTLFdBQ2pDRixFQUFFOEYsTUFBTXNFLEdBQUcsWUFDWHBLLEVBQUUsMkJBQTJCMkMsS0FBSyxXQUM5QjNDLEVBQUUsb0JBQW9CcUssV0FBVyxjQUdyQ3JLLEVBQUUsMkJBQTJCMkMsS0FBSyxXQUM5QjNDLEVBQUUsb0JBQW9CeUMsS0FBSyxXQUFZLGdCQUtuRHpDLEVBQUUySCxVQUFVekgsR0FBRyxRQUFTLGdCQUFpQixXQUVyQyxHQUFJb0ssR0FBaUJ0SyxFQUFFOEYsTUFBTW5FLEtBQUssV0FDOUI0SSxFQUFhdkksRUFBRXFCLElBQUlDLGdCQUFnQmdILEdBQWdCRSxRQUFRLE9BQVEsTUFDbkVDLEVBQWdCQyxRQUFRSCxFQUV4QkUsSUFDQXpLLEVBQUVzQixNQUNFRSxLQUFNLE9BQ05DLElBQUssV0FDTEYsU0FBVSxPQUNWSSxNQUNJQyxPQUFRLG1CQUNSRyxRQUFTQyxFQUFFQyxJQUFJRixRQUNmNEksTUFBTzNLLEVBQUU4RixNQUFNbkUsS0FBSyxTQUNwQkcsS0FBTTlCLEVBQUU4RixNQUFNbkUsS0FBSyxRQUNuQkUsV0FBWTdCLEVBQUU4RixNQUFNbkUsS0FBSyxlQUU3Qk8sUUFBUyxXQUNMakMsT0FBTzJLLFNBQVM5QyxLQUFPN0gsT0FBTzJLLFNBQVM5QyxVQU12RDlILEVBQUUySCxVQUFVekgsR0FBRyxRQUFTLGtCQUFtQixXQUN2QyxJQUFJRixFQUFFOEYsTUFBTTRDLFNBQVMsWUFBckIsQ0FHQTFJLEVBQUU4RixNQUFNd0MsU0FBUyxXQUNqQixJQUFJbEksR0FBVUosRUFBRThGLE1BQU0rRSxLQUFLLE1BQU05RSxNQUFNLEtBQUssR0FDeEMrRSxFQUFhOUssRUFBRThGLE1BQU0rRSxLQUFLLE1BQU05RSxNQUFNLEtBQUssR0FDM0NnRixFQUFVL0ksRUFBRXFCLElBQUlDLGdCQUFnQjBILHFCQUFxQlIsUUFBUSxRQUFTLE1BQU1BLFFBQVEsU0FBVSxLQUM5RlMsRUFBYWpMLEVBQUVnRixPQUFPLHNCQUN0QmlHLElBQWNQLFFBQVFLLEdBQ3RCM0IsY0FBYzBCLEVBQVkxSyxHQUUxQkosRUFBRThGLE1BQU1hLFlBQVksZUFNNUIzRyxFQUFFMkgsVUFBVXpILEdBQUcsU0FBVSxxQkFBc0IsV0FDTixHQUFqQ0YsRUFBRSxzQkFBc0IyRCxRQUN4QjNELEVBQUUsc0JBQXNCdUksU0FBU0EsU0FBU3pGLE9BQzFDOUMsRUFBRSxzQkFBc0J1SSxTQUFTQSxTQUFTeEYsUUFHVCxHQUFqQy9DLEVBQUUsc0JBQXNCMkQsUUFDeEIzRCxFQUFFLHNCQUFzQnVJLFNBQVNBLFNBQVN6RixPQUMxQzlDLEVBQUUsc0JBQXNCdUksU0FBU0EsU0FBU3hGLFVBS2xEL0MsRUFBRTJILFVBQVV6SCxHQUFHLFNBQVUsa0NBQW1DLFdBQ3hELE1BQUlGLEdBQUUsdUJBQXVCMkQsTUFBTXBCLE9BQVMsSUFDeEN2QyxFQUFFLFlBQVlrRixRQUFRLFFBQ3RCbEYsRUFBRSxtQ0FBbUNrRixRQUFRLFFBQzdDbEYsRUFBRSxtQ0FBbUNrRixRQUFRLFFBQzdDbEYsRUFBRSxzQkFBc0JpRixVQUFVLFNBRTNCLEtBT1hqRixFQUFFLG1CQUFtQnVDLE9BQVMsSUFDekJ2QyxFQUFFZ0YsT0FBTyxnQkFBa0JoRixFQUFFLGtCQUFrQm9ELFNBQ2hEcEQsRUFBRWdGLE9BQU8sZ0JBQWtCaEYsRUFBRSxrQkFBa0JvRCxRQUFRLEdBQVFrRyxRQUFTLEtBR2QsUUFBMUR0SixFQUFFZ0YsT0FBTyxnQkFBa0JoRixFQUFFLGtCQUFrQm9ELFNBQy9DcEQsRUFBRSxpQkFBbUJBLEVBQUUsa0JBQWtCb0QsUUFBUUwsT0FDakQvQyxFQUFFLGlCQUFtQkEsRUFBRSxrQkFBa0JvRCxRQUFRTixPQUNqRDlDLEVBQUUsaUJBQWlCaUYsY0FFbkJqRixFQUFFLGlCQUFtQkEsRUFBRSxrQkFBa0JvRCxRQUFRTCxPQUNqRC9DLEVBQUUsaUJBQW1CQSxFQUFFLGtCQUFrQm9ELFFBQVFOLE9BQ2pEOUMsRUFBRSxpQkFBaUJrRixXQUl2QmxGLEVBQUUscUJBQXFCa0csTUFBTSxXQUNyQmxHLEVBQUU4RixNQUFNNEMsU0FBUyxnQkFBa0IxSSxFQUFFLGtCQUFrQm9ELFNBQ3ZEcEQsRUFBRWdGLE9BQU8sZ0JBQWtCaEYsRUFBRSxrQkFBa0JvRCxRQUFRLEdBQVFrRyxRQUFTLEtBQ3hFdEosRUFBRSxpQkFBbUJBLEVBQUUsa0JBQWtCb0QsUUFBUU4sT0FDakQ5QyxFQUFFLGlCQUFtQkEsRUFBRSxrQkFBa0JvRCxRQUFRTCxPQUNqRC9DLEVBQUUsaUJBQWlCaUYsY0FFbkJqRixFQUFFZ0YsT0FBTyxnQkFBa0JoRixFQUFFLGtCQUFrQm9ELFFBQVEsR0FBU2tHLFFBQVMsS0FDekV0SixFQUFFLGlCQUFtQkEsRUFBRSxrQkFBa0JvRCxRQUFRTCxPQUNqRC9DLEVBQUUsaUJBQW1CQSxFQUFFLGtCQUFrQm9ELFFBQVFOLE9BQ2pEOUMsRUFBRSxpQkFBaUJrRixjQU0zQmxGLEVBQUUscUJBQXFCdUMsT0FBUyxJQUMzQnZDLEVBQUVnRixPQUFPLGtCQUFvQmhGLEVBQUUsa0JBQWtCb0QsU0FDbERwRCxFQUFFZ0YsT0FBTyxrQkFBb0JoRixFQUFFLGtCQUFrQm9ELFFBQVEsR0FBUWtHLFFBQVMsS0FHZCxRQUE1RHRKLEVBQUVnRixPQUFPLGtCQUFvQmhGLEVBQUUsa0JBQWtCb0QsU0FDakRwRCxFQUFFLG1CQUFxQkEsRUFBRSxrQkFBa0JvRCxRQUFRTCxPQUNuRC9DLEVBQUUsbUJBQXFCQSxFQUFFLGtCQUFrQm9ELFFBQVFOLE9BQ25EOUMsRUFBRSxtQ0FBbUNpRixjQUVyQ2pGLEVBQUUsbUJBQXFCQSxFQUFFLGtCQUFrQm9ELFFBQVFMLE9BQ25EL0MsRUFBRSxtQkFBcUJBLEVBQUUsa0JBQWtCb0QsUUFBUU4sT0FDbkQ5QyxFQUFFLG1DQUFtQ2tGLFdBSXpDbEYsRUFBRSx1QkFBdUJrRyxNQUFNLFdBQ3ZCbEcsRUFBRThGLE1BQU00QyxTQUFTLGtCQUFvQjFJLEVBQUUsa0JBQWtCb0QsU0FDekRwRCxFQUFFZ0YsT0FBTyxrQkFBb0JoRixFQUFFLGtCQUFrQm9ELFFBQVEsR0FBUWtHLFFBQVMsS0FDMUV0SixFQUFFLG1CQUFxQkEsRUFBRSxrQkFBa0JvRCxRQUFRTixPQUNuRDlDLEVBQUUsbUJBQXFCQSxFQUFFLGtCQUFrQm9ELFFBQVFMLE9BQ25EL0MsRUFBRSxtQ0FBbUNpRixjQUVyQ2pGLEVBQUVnRixPQUFPLGtCQUFvQmhGLEVBQUUsa0JBQWtCb0QsUUFBUSxHQUFTa0csUUFBUyxLQUMzRXRKLEVBQUUsbUJBQXFCQSxFQUFFLGtCQUFrQm9ELFFBQVFMLE9BQ25EL0MsRUFBRSxtQkFBcUJBLEVBQUUsa0JBQWtCb0QsUUFBUU4sT0FDbkQ5QyxFQUFFLG1DQUFtQ2tGLGNBS2pEbEYsRUFBRTJILFVBQVV6SCxHQUFHLFFBQVMsMkRBQTRELFdBQ2hGLEdBQUkyRixHQUFRN0YsRUFBRThGLE1BQU1yRCxLQUFLLE1BQU1zRCxNQUFNLElBRXJCLFNBQVpGLEVBQU0sSUFDTjdGLEVBQUUsK0JBQWlDNkYsRUFBTSxJQUFJL0MsT0FDN0M5QyxFQUFFLCtCQUFpQzZGLEVBQU0sSUFBSTlDLE9BQzdDL0MsRUFBRSwwQkFBNEI2RixFQUFNLElBQUlaLGNBRXhDakYsRUFBRSwrQkFBaUM2RixFQUFNLElBQUk5QyxPQUM3Qy9DLEVBQUUsK0JBQWlDNkYsRUFBTSxJQUFJL0MsT0FDN0M5QyxFQUFFLDBCQUE0QjZGLEVBQU0sSUFBSVgsYUFLaERpRixxQkFDQW5LLEVBQUUySCxVQUFVekgsR0FBRyxTQUFVLGVBQWdCLFdBQ3JDaUssdUJBUUpuSyxFQUFFMkgsVUFBVXpILEdBQUcsUUFBUywwQ0FBMkMsU0FBV2dMLEdBQzFFLEdBQUlDLEdBQU9uTCxFQUFFa0wsRUFBTUUsUUFDZkMsRUFBY0YsRUFBS3pDLFNBQVMsZUFDNUI0QyxFQUFjLE1BQU9DLEVBQVMsT0FDOUJDLEVBQWFMLEVBQUsxSSxLQUFLLFdBRXRCNEksS0FDREMsRUFBYyxPQUNkQyxFQUFTLE9BR2JKLEVBQUtNLFFBQVEseUJBQXlCQyxZQUNqQ0MsT0FBU0gsRUFBWUQsSUFDckJLLE9BRUxULEVBQUs3QyxTQUFTLFdBQWFpRCxHQUFRNUUsWUFBWSxtQkFBcUIyRSxHQUNwRUgsRUFBSzVDLFNBQVM1QixZQUFZLG9DQUMxQndFLEVBQUs5QyxXQUFXMUIsWUFBWSw0QkFBNEIyQixTQUFTLGFBSWpFdEksRUFBRSxjQUFjdUMsT0FBUyxHQUN6QnZDLEVBQUUsY0FBYzRKLFlBSWlCLG1CQUExQjVILEdBQUVxQixJQUFJQyxnQkFDYixHQUFJdUksaUJBQ0FDLFlBQWUsaUNBQW1DOUosRUFBRXFCLElBQUlDLGdCQUFnQnlJLFlBQWMsVUFDdEZDLGFBQWdCaEssRUFBRXFCLElBQUlDLGdCQUFnQjJJLGFBQ3RDQyxNQUFTbEssRUFBRXFCLElBQUlDLGdCQUFnQjZJLE1BQy9CQyxRQUFXcEssRUFBRXFCLElBQUlDLGdCQUFnQitJLFFBQ2pDQyxZQUFldEssRUFBRXFCLElBQUlDLGdCQUFnQmlKLFlBQ3JDQyxXQUNJQyxNQUFTekssRUFBRXFCLElBQUlDLGdCQUFnQm9KLE1BQy9CQyxVQUFhM0ssRUFBRXFCLElBQUlDLGdCQUFnQnNKLFdBTS9DLElBQUk1TSxFQUFFLFNBQVN1QyxPQUFTLEVBQUcsQ0FFdkIsR0FBSXNLLFdBQVksQ0FDWjdNLEdBQUUsaUJBQWlCdUMsT0FBUyxJQUM1QnNLLFVBQVk3TSxFQUFFLGlCQUFpQm9FLFFBRW5DcEUsRUFBRSxTQUFTOE0sTUFDUEMsT0FBVUYsVUFDVjlKLEtBQVEsV0FDSixHQUFJOUIsR0FBUWpCLEVBQUVnTixHQUFHcEQsVUFBVXFELFVBQVMsRUFDaENoTSxHQUFNc0IsT0FBUyxHQUNmdkMsRUFBRWlCLEdBQU8ySSxZQUFZc0QsMEJBT2pDbE4sRUFBRSxvQkFBb0J1QyxPQUFTLEdBQy9CdkMsRUFBRSxvQkFBb0I0SixXQUNsQnVELGFBQWUsRUFDZkMsWUFBZSxXQUNmQyxlQUNNQyxXQUFhLEVBQU9DLE9BQVUsZ0JBQWlCQyxVQUFhLEtBQzVERCxPQUFVLE9BQVFDLFVBQWEsS0FFckNDLFVBQWE1QixlQUNiNkIsYUFBZ0IsU0FBVUMsRUFBU0MsRUFBUUMsR0FDdkM3TixFQUFFc0IsTUFDRUMsU0FBWSxPQUNaQyxLQUFRLE9BQ1JDLElBQU9rTSxFQUNQaE0sTUFBVUMsT0FBUSxjQUFlQyxXQUFZN0IsRUFBRSxrQkFBa0JvRCxPQUFRMEssS0FBTTlOLEVBQUUsY0FBY29ELFFBQy9GbEIsUUFBVyxTQUFVQyxHQUNqQjBMLEVBQVcxTCxJQUVmZSxNQUFTLFNBQVV2QixFQUFNd0IsR0FDckJuRCxFQUFFLDBCQUEwQnlDLEtBQUssUUFBUyxzQkFDMUN6QyxFQUFFLHFCQUFxQm9ELEtBQUtwQixFQUFFcUIsSUFBSUMsZ0JBQWdCeUssdUJBV3RFLElBQUlDLGdDQUNBQyxlQUNBQyxZQUFjbE8sRUFBRSxpQ0FBaUN1QyxPQUFTdkMsRUFBRSw4QkFBOEJ1QyxPQUMxRjRMLGVBQWtCbk8sRUFBRSw4Q0FBOEN1QyxPQUFTLEVBQzNFNkwsZUFBa0JwTyxFQUFFLHlDQUF5Q3VDLE9BQVMsRUFDdEU4TCxhQUFnQnJPLEVBQUUsd0NBQXdDdUMsT0FBUyxFQUNuRStMLGNBQWlCdE8sRUFBRSwrQ0FBK0N1QyxPQUFTLENBRS9FLElBQUk0TCxlQUNBLElBQUssR0FBSW5LLEdBQUksRUFBR0EsRUFBSWtLLFlBQWFsSyxJQUNwQixHQUFMQSxHQUNBZ0ssNEJBQTRCTyxNQUFPQyxNQUFTLFNBQVVsQixXQUFhLElBQ25FVyxZQUFZTSxNQUFLLElBQ0wsR0FBTHZLLEdBQ1BnSyw0QkFBNEJPLE1BQU9DLE1BQVMsU0FBVWxCLFdBQWEsRUFBT21CLFVBQVksSUFDdEZSLFlBQVlNLE1BQUssSUFDTCxHQUFMdkssR0FDUGdLLDRCQUE0Qk8sTUFBT0csVUFBYTFLLEVBQUksRUFBR3dLLE1BQVMsV0FDaEVQLFlBQVlNLE1BQUssSUFDTCxHQUFMdkssR0FDUGdLLDRCQUE0Qk8sTUFBT2hCLE9BQVUsVUFDN0NVLFlBQVlNLE1BQUssSUFDTCxHQUFMdkssR0FBZ0IsSUFBTEEsR0FBV29LLGdCQUEwQixJQUFMcEssSUFBWW9LLGdCQUF5QixJQUFMcEssR0FBV3FLLGNBQzdGTCw0QkFBNEJPLE1BQU9oQixPQUFVLFFBQVNtQixVQUFhMUssRUFBSSxFQUFHd0ssTUFBUyxZQUNuRlAsWUFBWU0sTUFBSyxJQUNKLElBQUx2SyxHQUFXb0ssZ0JBQXlCLElBQUxwSyxJQUFZb0ssZ0JBQ25ESiw0QkFBNEJPLE1BQU9oQixPQUFVLFVBQzdDVSxZQUFZTSxNQUFLLElBQ0wsR0FBTHZLLEdBQVlBLEdBQUssSUFBTW9LLGlCQUFtQkMsY0FDN0NySyxHQUFLLE1BQVNvSyxnQkFBa0JDLGNBQWtCRCxpQkFBbUJDLGVBQ3JFckssR0FBSyxJQUFNb0ssZ0JBQWtCQyxjQUNqQ0wsNEJBQTRCTyxNQUFPaEIsT0FBVSxTQUFVRCxXQUFhLElBQ3BFVyxZQUFZTSxNQUFLLEtBQ0osR0FBTHZLLEdBQWlCLEdBQUxBLEdBQWlCLEdBQUxBLEdBQWlCLEdBQUxBLEdBQVVvSyxnQkFBMEIsR0FBTHBLLElBQVdvSyxnQkFBeUIsSUFBTHBLLEdBQVdxSyxnQkFDckhMLDRCQUE0Qk8sTUFBT0UsVUFBWSxJQUMvQ1IsWUFBWU0sTUFBSyxRQUt6QixLQUFLLEdBQUl2SyxHQUFJLEVBQUdBLEVBQUlrSyxZQUFhbEssSUFDcEIsR0FBTEEsR0FDQWdLLDRCQUE0Qk8sS0FBSyxNQUNqQ04sWUFBWU0sTUFBSyxJQUNMLEdBQUx2SyxHQUNQZ0ssNEJBQTRCTyxNQUFPRyxVQUFhMUssRUFBSSxFQUFHd0ssTUFBUyxXQUNoRVAsWUFBWU0sTUFBSyxJQUNMLEdBQUx2SyxHQUNQZ0ssNEJBQTRCTyxNQUFPaEIsT0FBVSxVQUM3Q1UsWUFBWU0sTUFBSyxJQUNMLEdBQUx2SyxHQUFnQixHQUFMQSxHQUFVb0ssZ0JBQTBCLEdBQUxwSyxJQUFXb0ssZ0JBQXlCLElBQUxwSyxHQUFXcUssY0FDM0ZMLDRCQUE0Qk8sTUFBT2hCLE9BQVUsUUFBU21CLFVBQWExSyxFQUFJLEVBQUd3SyxNQUFTLFlBQ25GUCxZQUFZTSxNQUFLLElBQ0osSUFBTHZLLEdBQVdvSyxnQkFBeUIsSUFBTHBLLElBQVlvSyxnQkFDbkRKLDRCQUE0Qk8sTUFBT2hCLE9BQVUsVUFDN0NVLFlBQVlNLE1BQUssSUFDTCxHQUFMdkssR0FBWUEsR0FBSyxJQUFNb0ssaUJBQW1CQyxjQUM3Q3JLLEdBQUssTUFBU29LLGdCQUFrQkMsY0FBa0JELGlCQUFtQkMsZUFDckVySyxHQUFLLElBQU1vSyxnQkFBa0JDLGNBQ2pDTCw0QkFBNEJPLE1BQU9oQixPQUFVLFNBQVVELFdBQWEsSUFDcEVXLFlBQVlNLE1BQUssS0FDSixHQUFMdkssR0FBaUIsR0FBTEEsR0FBaUIsR0FBTEEsR0FBaUIsR0FBTEEsR0FBVW9LLGdCQUEwQixHQUFMcEssSUFBV29LLGdCQUF5QixJQUFMcEssR0FBV3FLLGdCQUNySEwsNEJBQTRCTyxNQUFPRSxVQUFZLElBQy9DUixZQUFZTSxNQUFLLEdBSzdCLElBQUlJLGVBQ0FDLG1CQUNKNU8sR0FBRSw4QkFBOEIyQyxLQUFLLFdBRWpDLEdBQUl2QyxHQUFVSixFQUFFOEYsTUFBTXJELEtBQUssS0FDM0JtTSxrQkFBaUJ4TyxHQUFXLEVBRTVCdU8sV0FBV3ZPLEdBQVdKLEVBQUUsU0FBV0ksR0FBU3dKLFdBQ3hDdUQsYUFBZSxFQUNmMEIsVUFBYWIsNEJBQ2JjLGNBQWlCLEdBQUksR0FBSSxHQUFJLFNBQVcsR0FBSSxHQUFJLEdBQUksSUFBSyxRQUN6REMsWUFBZSxFQUFHLFFBQVMsRUFBRyxRQUM5QjNCLFlBQWUsV0FDZkssVUFBYTVCLGVBQ2JtRCxLQUFRLHNIQUNSdEIsYUFBZ0IsU0FBVUMsRUFBU0MsRUFBUUMsR0FDdkM3TixFQUFFc0IsTUFDRUMsU0FBWSxPQUNaQyxLQUFRLE9BQ1JDLElBQU9rTSxFQUNQaE0sTUFBVUMsT0FBUSxxQkFDbEJNLFFBQVcsU0FBVUMsR0FDakI3QixtQkFBbUJGLEdBRW5CeU4sRUFBVzFMLEdBQ1huQyxFQUFFLElBQU1JLEVBQVUsZUFBZXFDLEtBQUssUUFBUyx1QkFDL0N6QixlQUFlMk4sV0FBV3ZPLEdBQVVKLEVBQUUsa0JBQWtCb0QsT0FBUWhELEVBQVMsRUFBR3dPLGlCQUFrQixPQUkxR0ssWUFBYyxFQUNkQyxZQUFlLFNBQVVDLEVBQVdDLEdBQ2hDLElBQ0lDLGFBQWFDLFFBQVFsUCxFQUFVLGFBQWNtUCxLQUFLQyxVQUFVSixJQUM5RCxNQUFPeEgsTUFHYjZILGtCQUFxQixTQUFVTixFQUFXQyxHQUN0Q0EsRUFBTU0sVUFBWXpCLGFBRXRCMEIsWUFBZSxTQUFVUixHQUNyQixJQUNJLE1BQU9JLE1BQUtLLE1BQU1QLGFBQWFRLFFBQVF6UCxFQUFVLGVBQ25ELE1BQU93SCxNQUdia0ksa0JBQXFCLFNBQVVYLEVBQVdDLEdBQ3RDQSxFQUFNTSxVQUFZekIsYUFFdEI4QixlQUFrQixTQUFVWixHQUN4QmpILDJCQUNBTSxzQkFBc0IsTUFBTyxFQUFHcEksRUFBUyxHQUN6Q2dJLHFCQUFxQixNQUFPLEVBQUdoSSxFQUFTLEdBQ3hDMkcsb0JBQW9CLE1BQU8sRUFBRyxFQUFHLEdBQ2pDVSx1QkFBdUJySCxHQUN2QjhKLHFCQUFxQixFQUFHOUosR0FDeEIrRSx5QkFBeUIsTUFBTyxFQUFHLFFBTS9DbkYsRUFBRSw4QkFBOEIyQyxLQUFLLFdBQ2pDLEdBQUl2QyxHQUFVSixFQUFFOEYsTUFBTXJELEtBQUssS0FHM0JrQyw0QkFBMkJ2RSxFQUFTLEtBR3BDSixFQUFFLG9CQUFvQnVDLE9BQVMsR0FDL0JrQyxzQkFJSnpFLEVBQUUsd0JBQXdCMkMsS0FBSyxXQUMzQixHQUFJdkMsR0FBVUosRUFBRThGLE1BQU1yRCxLQUFLLE1BQU1zRCxNQUFNLHdCQUF3QixHQUUzRGlLLEVBQXNCaFEsRUFBRSx3QkFBMEJJLEdBQVNnRCxNQUMvRHBELEdBQUUsd0JBQTBCSSxHQUFTVyxTQUNyQ2YsRUFBRSxJQUFNSSxFQUFVLFdBQVdLLE1BQU11UCxHQUNuQ2hRLEVBQUUsbUJBQW1CK0MsT0FFckIvQyxFQUFFLFlBQWNJLEdBQVMyQyxPQUN6Qi9DLEVBQUUsZUFBaUJJLEdBQVMwQyxRQUdoQyxJQUFJbU4sZUFBZ0JqUSxFQUFFLGlCQStSdEIsSUE3UkFBLEVBQUUyQyxLQUFLc04sY0FBZSxXQUNsQixHQUFJN1AsR0FBVUosRUFBRThGLE1BQU1yRCxLQUFLLE1BQU1zRCxNQUFNLEtBQUssRUFDNUMvRixHQUFFOEYsTUFBTS9FLFNBQ1JmLEVBQUUsSUFBTUksRUFBVSxXQUFXSyxNQUFNVCxFQUFFOEYsU0FHWCxXQUExQjlGLEVBQUUsY0FBY29ELFFBQ2hCcEQsRUFBRSwwREFBMEQ4QyxPQUloRTlDLEVBQUUsaUJBQWlCa0csTUFBTSxXQVdyQixNQVZJbEcsR0FBRThGLE1BQU1zRSxHQUFHLGNBQ1hwSyxFQUFFLGlCQUFpQjhDLE9BQ25COUMsRUFBRSxvQkFBb0IrQyxPQUV0Qi9DLEVBQUUsOEJBQThCMkMsS0FBSyxXQUNqQ2lNLGlCQUFpQjVPLEVBQUU4RixNQUFNckQsS0FBSyxPQUFTLEVBQ3ZDa00sV0FBVzNPLEVBQUU4RixNQUFNckQsS0FBSyxPQUFPeU4sZUFDL0J2QixXQUFXM08sRUFBRThGLE1BQU1yRCxLQUFLLE9BQU8wTix1QkFHaEMsSUFJUG5RLEVBQUUsNkJBQTZCdUMsT0FBUyxHQUN4Q3ZDLEVBQUUseUJBQXlCa0csTUFBTSxXQUU3QmxHLEVBQUUseUJBQXlCOEMsT0FDM0I5QyxFQUFFLDRCQUE0QitDLE9BRTlCL0MsRUFBRXNCLE1BQ0VFLEtBQU0sT0FDTkMsSUFBS08sRUFBRUMsSUFBSXNFLFFBQVUsZ0NBQ3JCaEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRLHVCQUF3QkMsV0FBWTdCLEVBQUUsNkJBQTZCMkIsS0FBSyxxQkFBc0JJLFFBQVNDLEVBQUVDLElBQUlGLFNBQzdIRyxRQUFTLFNBQVVQLEdBQ2YzQixFQUFFLHlCQUF5QitDLE9BQzNCL0MsRUFBRSw0QkFBNEI4QyxZQU8xQzlDLEVBQUUsMkJBQTJCdUMsT0FBUyxHQUN0Q3RDLE9BQU9zSSxPQUFPdkksRUFBRSxlQUFldUYsU0FBUzZLLFFBQ3BDM0ssTUFBTyxRQUNQN0UsT0FBUSxVQUtoQlosRUFBRSxlQUFla0csTUFBTSxXQUNuQmxHLEVBQUUsb0JBQW9COEMsT0FDdEI5QyxFQUFFLGVBQWU4QyxPQUNqQjlDLEVBQUUsd0JBQXdCK0MsT0FDMUIvQyxFQUFFc0IsTUFDRUUsS0FBTSxPQUNOQyxJQUFLLFdBQ0xGLFNBQVUsT0FDVkksTUFBUUMsT0FBUSxxQkFBc0JDLFdBQVk3QixFQUFFLGtCQUFrQm9ELE9BQVFyQixRQUFTQyxFQUFFQyxJQUFJRixTQUM3RkcsUUFBUyxTQUFVUCxHQUNmMUIsT0FBTzJLLFNBQVM5QyxLQUFPN0gsT0FBTzJLLFNBQVM5QyxNQUUzQzVFLE1BQU8sU0FBVXZCLEVBQU13QixHQUNuQm5ELEVBQUUsZUFBZStDLE9BQ2pCL0MsRUFBRSx3QkFBd0I4QyxPQUMxQjlDLEVBQUUsb0JBQW9CK0MsWUFNOUIvQyxFQUFFLDBCQUEwQnVDLE9BQVMsR0FDckN2QyxFQUFFLDBCQUEwQnVGLFVBQ3hCZ0MsUUFBUSxFQUFNOUIsTUFBTyxRQUFTN0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLGlCQUFrQjZCLFdBQVksT0FDeEdMLE9BQVEsV0FDSkMsc0JBQ0E3RyxpQkFFSnVHLFVBQVcsV0FDUGhHLGlCQUUwQiwrQkFBdEJkLEVBQUU4RixNQUFNckQsS0FBSyxPQUNiZSxzQkFFSnhELEVBQUUsa0JBQWtCZSxZQU01QmYsRUFBRSx1QkFBdUJ1QyxPQUFTLEdBQ2xDdkMsRUFBRSx1QkFBdUJ1RixVQUNyQmdDLFFBQVEsRUFBTTlCLE1BQU8sUUFBUzdFLE9BQVEsUUFBUzhFLFFBQVMsTUFBT0MsVUFBVyxjQUFlNkIsV0FBWSxPQUNyR0wsT0FBUSxXQUNKQyxzQkFDQTdHLGlCQUVKdUcsVUFBVyxXQUNQOUcsRUFBRSxrQkFBa0JlLFNBQ3BCRCxvQkFNWmQsRUFBRSxxQ0FBcUNxUSxVQUFVLFdBQ0osSUFBckNyUSxFQUFFLDBCQUEwQjJELE9BQStELEtBQWhEM0QsRUFBRSxxQ0FBcUMyRCxPQUM5RStHLFFBQVExSSxFQUFFcUIsSUFBSUMsZ0JBQWdCZ04sc0JBQzlCdFEsRUFBRSxxQ0FBcUMyRCxJQUFJLFFBTW5EM0QsRUFBRSw2QkFBNkJ1QyxPQUFTLEdBQUt2QyxFQUFFLGlEQUFpRHVDLE9BQVMsSUFDekd2QyxFQUFFLDRFQUE0RXVGLFVBQzFFZ0MsUUFBUSxFQUFNOUIsTUFBTyxRQUFTN0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLG9CQUFxQjZCLFdBQVksT0FDM0dMLE9BQVEsV0FDSkMsc0JBQ0E3RyxpQkFFSnVHLFVBQVcsV0FDUDlHLEVBQUUsa0JBQWtCZSxTQUNwQkQsb0JBTVJkLEVBQUUsZ0NBQWdDdUMsT0FBUyxHQUMzQ3ZDLEVBQUUsZ0NBQWdDdUYsVUFDOUJnQyxRQUFRLEVBQU05QixNQUFPLFFBQVM3RSxPQUFRLFFBQVM4RSxRQUFTLE1BQU9DLFVBQVcsbUJBQW9CNkIsV0FBWSxPQUMxR0wsT0FBUSxXQUdKYyxzQkFFQTFILGlCQUVKdUcsVUFBVyxXQUNQOUcsRUFBRSxrQkFBa0JlLFNBQ3BCRCxrQkFFSnVHLFNBQVUsV0FDTixHQUFJeEIsR0FBUTdGLEVBQUU4RixNQUFNckQsS0FBSyxNQUFNc0QsTUFBTSxJQUNyQ3BCLDRCQUEyQmtCLEVBQU0sR0FBSSxNQU03QzdGLEVBQUUsZ0NBQWdDdUMsT0FBUyxHQUMzQ3ZDLEVBQUUsZ0NBQWdDdUYsVUFDOUJnQyxRQUFRLEVBQU05QixNQUFPLFFBQVM3RSxPQUFRLFFBQVM4RSxRQUFTLE1BQU9DLFVBQVcsbUJBQW9CNkIsV0FBWSxPQUMxR0wsT0FBUSxXQUNKQyxzQkFDQTdHLGlCQUVKdUcsVUFBVyxXQUNQOUcsRUFBRSxrQkFBa0JlLFNBQ3BCRCxvQkFNUmQsRUFBRSxtQkFBbUJ1QyxPQUFTLEdBQzlCdkMsRUFBRSxtQkFBbUJ1RixVQUNqQmdDLFFBQVEsRUFBTTlCLE1BQU8sUUFBUzdFLE9BQVEsUUFBUzhFLFFBQVMsTUFBT0MsVUFBVyxXQUFZNkIsV0FBWSxPQUFRK0ksYUFBYSxFQUN2SHBKLE9BQVEsV0FDSkMsc0JBQ0E3RyxpQkFFSnVHLFVBQVcsV0FDUDlHLEVBQUUsa0JBQWtCZSxTQUNwQkQsb0JBTVJkLEVBQUUsdUJBQXVCdUMsT0FBUyxHQUNsQ3ZDLEVBQUUsdUJBQXVCdUYsVUFDckJnQyxRQUFRLEVBQU05QixNQUFPLFFBQVM3RSxPQUFRLFFBQVM4RSxRQUFTLE1BQU9DLFVBQVcsZ0JBQWlCNkIsV0FBWSxPQUFRK0ksYUFBYSxFQUM1SHBKLE9BQVEsV0FDSkMsc0JBQ0E3RyxpQkFFSnVHLFVBQVcsV0FDUDlHLEVBQUUsa0JBQWtCZSxTQUNwQkQsb0JBTVJkLEVBQUUsZ0NBQWdDdUMsT0FBUyxJQUMzQ3pCLGlCQUNBYixPQUFPc0ksT0FBT3ZJLEVBQUUsa0JBQWtCdUYsU0FBUzZLLFFBQ3ZDM0ssTUFBTyxRQUNQN0UsT0FBUSxXQUtaWixFQUFFLHVCQUF1QnVDLE9BQVMsR0FDbEN2QyxFQUFFLHVCQUF1QnVGLFVBQ3JCZ0MsUUFBUSxFQUFNOUIsTUFBTyxRQUFTN0UsT0FBUSxRQUFTOEUsUUFBUyxNQUFPQyxVQUFXLGNBQWU2QixXQUFZLE9BQ3JHTCxPQUFRLFdBQ0pDLHNCQUNBN0csaUJBRUp1RyxVQUFXLFdBQ1A5RyxFQUFFLGtCQUFrQmUsU0FDcEJELG9CQU1aZCxFQUFFMkgsVUFBVXpILEdBQUcsUUFBUyxtREFBb0QsV0FDeEUsR0FBSXNRLElBQVUsRUFDVjNLLEVBQVE3RixFQUFFOEYsTUFBTXJELEtBQUssTUFBTXNELE1BQU0sS0FDakMwSyxFQUFXelEsRUFBRSxhQUFlNkYsRUFBTSxJQUFJekMsT0FDdENzTixFQUFnQkMsT0FBT0YsR0FBVUcsT0FFakM5SCxFQUFTakQsRUFBTSxHQUNmUixFQUFnQlEsRUFBTSxHQUN0QnpGLEVBQVV5RixFQUFNLEVBV3BCLElBUkk2SyxFQUFnQkMsU0FBU0MsUUFDckI1USxFQUFFOEYsTUFBTTRDLFNBQVMsb0JBQ1pnQyxRQUFRMUksRUFBRXFCLElBQUlDLGdCQUFnQnVOLHlCQUMvQkwsR0FBVSxJQUtsQkEsRUFBUyxDQUNUdkgsU0FBV2hKLE9BQU80SCxLQUFLLEdBQUksU0FDM0IsSUFBSWlKLEdBQVUsa0NBQ2RBLElBQVcsYUFBZTlPLEVBQUVDLElBQUlzRSxRQUFVLDRFQUMxQ3VLLEdBQVcseURBQTJEOU8sRUFBRXFCLElBQUlDLGdCQUFnQnlOLFVBQVksT0FDeEdELEdBQVcsU0FDWDlRLEVBQUVpSixTQUFTdEIsU0FBU3FKLE1BQU01TixLQUFLME4sR0FHL0I5USxFQUFFc0IsTUFDRUUsS0FBTSxPQUNOQyxJQUFLTyxFQUFFQyxJQUFJc0UsUUFBVSxnQ0FDckJoRixTQUFVLE9BQ1ZJLE1BQVFDLE9BQVFrSCxFQUFRQyxXQUFZMUQsRUFBZXhELFdBQVk3QixFQUFFLGtCQUFrQm9ELFFBQ25GbEIsUUFBUyxTQUFVUCxHQUNmM0IsRUFBRWlKLFNBQVN0QixTQUFTcUosTUFBTTVOLEtBQUswTixFQUFVblAsR0FDekNzSCxTQUFTdEIsU0FBU3NKLE1BQU0sR0FBR3BJLFNBQzNCSSxTQUFTdEIsU0FBU3JCLFFBRWxCMEMsY0FBYzVJLFNBTTFCSixFQUFFLHFDQUFxQ3VDLE9BQVMsR0FDaERpQixzQkFJQTBOLE1BQVF4USxLQUFvQyxPQUE3QlYsRUFBRSxpQkFBaUJvRCxPQUNsQ3BELEVBQUUsUUFBUWEsSUFBSSxhQUFjLFFBQ3JCcVEsTUFBUXhRLEtBQW9DLGFBQTdCVixFQUFFLGlCQUFpQm9ELFFBQ3pDcEQsRUFBRSxRQUFRYSxJQUFJLGFBQWMsUUFHaENiLEVBQUUscUJBQXFCRSxHQUFHLFFBQVMsV0FDSCxHQUF4QkYsRUFBRThGLE1BQU1uRSxLQUFLLFNBQ2I0SCxNQUFNdkgsRUFBRXFCLElBQUlDLGdCQUFnQjZOLG9CQUloQ25SLEVBQUUsa0JBQWtCdUMsT0FBUyxFQUFHLENBQ2hDdkMsRUFBRWdOLEdBQUczTSxTQUFTK1EsU0FBU0MsS0FBTyxTQUM5QnJSLEVBQUVnTixHQUFHM00sU0FBUytRLFNBQVMzUCxJQUFNLFdBQzdCekIsRUFBRWdOLEdBQUczTSxTQUFTK1EsU0FBU0UsT0FBUyxTQUNoQ3RSLEVBQUVnTixHQUFHM00sU0FBUytRLFNBQVNHLGFBQWMsRUFDckN2UixFQUFFZ04sR0FBRzNNLFNBQVMrUSxTQUFTSSxhQUNuQmpRLFNBQVUsUUFHZHZCLEVBQUUsa0JBQWtCSyxVQUNoQm9SLFNBQVUsU0FBVXROLEdBQ2hCLEdBQUluRSxFQUFFOEYsTUFBTXJELEtBQUssTUFBTWlQLFFBQVEsV0FBYSxJQUFNQyxLQUFLQyxNQUFNek4sSUFBVUEsSUFBVW5FLEVBQUVpRSxVQUFVRSxJQUFVQSxFQUFNdU4sUUFBUSxVQUNqSCxNQUFPMVAsR0FBRXFCLElBQUlDLGdCQUFnQnVPLGVBR3JDM1AsUUFBUyxTQUFVaUIsRUFBVTJPLEdBQ3pCLElBQUszTyxFQUFTakIsUUFDVixNQUFPaUIsR0FBUzBELEdBQ2IsSUFBc0IsWUFBbEIxRCxFQUFTNE8sTUFDaEIvUixFQUFFLFlBQWNtRCxFQUFTNk8sUUFBUTlMLFFBR2pDbEcsRUFBRXNCLE1BQ0VFLEtBQU0sT0FDTkMsSUFBS08sRUFBRUMsSUFBSXNFLFFBQVUsZ0NBQ3JCaEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRLHVCQUF3QkMsV0FBWTdCLEVBQUUsa0JBQWtCb0QsT0FBUXJCLFFBQVNDLEVBQUVDLElBQUlGLGVBRWhHLElBQXNCLFlBQWxCb0IsRUFBUzRPLE1BQXFCLENBQ3JDLEdBQUlFLEdBQVFqUyxFQUFFOEYsTUFBTW9NLGFBQWEsa0JBQWtCM0osU0FBUzlGLEtBQUssa0JBQ2pFekMsR0FBRSxJQUFNaVMsR0FBTzdOLEtBQUswTixPQUs1QjlSLEVBQUUsbUJBQW1CMEksU0FBUyw2QkFDOUIxSSxFQUFFLG1CQUFtQjhDLE9BQ3JCOUMsRUFBRSxnQkFBZ0JvRCxLQUFLLHVDQUczQnBELEVBQUUscUJBQXFCRSxHQUFHLFFBQVMsV0FDL0IsR0FBSWlTLEdBQVFuUyxFQUFFOEYsS0FDZDlGLEdBQUVzQixNQUNFRSxLQUFNLE9BQ05DLElBQUssV0FDTEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRLGFBQWNFLEtBQU1xUSxFQUFNeFEsS0FBSyxNQUFPRSxXQUFZN0IsRUFBRSxrQkFBa0JvRCxRQUN0RmxCLFFBQVMsU0FBVVAsR0FDZndRLEVBQU14USxLQUFLLE9BQVFBLEVBQVcsTUFDOUJ3USxFQUFNeFEsS0FBSyxTQUFVQSxFQUFhLFFBQ2xDd1EsRUFBTXhRLEtBQUssWUFBYUEsRUFBZ0IsZUFLcEQsSUFBSXlRLFNBQVUsR0FBSUMsS0FDbEJyUyxHQUFFLGtCQUFrQkssVUFDaEJtQixLQUFRLFlBQ1I4USxPQUFVLG1CQUNWQyxXQUFjLG9CQUNkQyxTQUFZLG9CQUNaQyxXQUNJQyxXQUFjLEVBQ2RDLFFBQVcsSUFDWEMsUUFBV1IsUUFBUVMsY0FBZ0IsRUFDbkNDLFdBQWEsR0FFakJyQixTQUFVLFNBQVV0TixHQUNoQixHQUFJQSxFQUFNbU8sT0FBTyxLQUFPM0IsU0FBU0MsUUFDN0I1USxFQUFFOEYsTUFBTTRDLFNBQVMscUJBQ08sR0FBeEIxSSxFQUFFOEYsTUFBTW5FLEtBQUssU0FDYSxHQUExQjNCLEVBQUU4RixNQUFNbkUsS0FBSyxXQUNnQixHQUE3QjNCLEVBQUU4RixNQUFNbkUsS0FBSyxlQUNSK0ksUUFBUTFJLEVBQUVxQixJQUFJQyxnQkFBZ0J5UCxvQkFHL0IsTUFGQS9TLEdBQUUsa0JBQWtCZ1Qsa0JBQWtCLFFBRS9CLEtBSW5COVEsUUFBUyxTQUFVaUIsRUFBVTJPLEdBQ3pCLE1BQUszTyxHQUFTakIsU0FHVmxDLEVBQUUsWUFBY21ELEVBQVM2TyxRQUFROUwsYUFFSCwyQkFBMUIvQyxFQUFTOFAsZUFDVGpULEVBQUUsbUJBQW1COEMsT0FDckI5QyxFQUFFLGdCQUFnQm9ELEtBQUssd0NBRXZCcEQsRUFBRSxlQUFlZSxTQUNqQmYsRUFBRSxtQkFBbUIrQyxVQVRsQkksRUFBUzBELE9BZTVCN0csRUFBRSxrQkFBa0JrRyxNQUFNLFdBQ3RCLEdBQUlsRyxFQUFFOEYsTUFBTTRDLFNBQVMscUJBQ2pCLE9BQU8sSUFLZjFJLEVBQUUsa0NBQWtDRSxHQUFHLFFBQVMsU0FBVTBILEVBQUd2SCxHQUN6RCxHQUFJNlMsR0FBV2xULEVBQUU4RixNQUFNK0UsS0FBSyxLQUM1QjdLLEdBQUUsa0NBQWtDbVQsSUFBSSxJQUFNRCxHQUFTN1MsU0FBUyxXQUNoRUwsRUFBRSxtQkFBbUJzSSxTQUFTLGNBSWxDdEksRUFBRSxrQ0FBa0NFLEdBQUcsU0FBVSxXQUM3QyxHQUFJZ1QsR0FBV2xULEVBQUU4RixNQUFNK0UsS0FBSyxLQUM1QjdLLEdBQUUsa0NBQWtDbVQsSUFBSSxJQUFNRCxHQUFTN1MsU0FBUyxVQUNoRUwsRUFBRSxtQkFBbUIyRyxZQUFZLGNBSXpDM0csRUFBRSx1Q0FBdUM2SSxTQUdyQzdJLEVBQUUsdUJBQXVCdUMsT0FBUyxHQUNsQ3ZDLEVBQUUsdUJBQXVCdUYsVUFDckJnQyxRQUFRLEVBQU05QixNQUFPLFFBQVM3RSxPQUFRLFFBQVM4RSxRQUFTLE1BQU9DLFVBQVcsWUFBYXlOLFVBQVcsUUFDbEdqTSxPQUFRLFdBQWM1RyxpQkFDdEJxRixXQUFZLFdBQ1I1RixFQUFFQyxRQUFRQyxHQUFHLFVBQVcsU0FBVW1ULEdBQzlCLEdBQUl0SSxHQUE2QixtQkFBWnNJLEdBQUcxUixLQUF1QjBSLEVBQUdDLGNBQWMzUixLQUFPMFIsRUFBRzFSLElBRTFFM0IsR0FBRXNCLE1BQ0VFLEtBQU0sT0FDTkMsSUFBS08sRUFBRUMsSUFBSXNFLFFBQVUsZ0NBQ3JCaEYsU0FBVSxPQUNWSSxNQUFRQyxPQUFRLHNCQUF1Qm1KLFFBQVNBLEVBQVNoSixRQUFTQyxFQUFFQyxJQUFJRixTQUN4RUcsUUFBUyxTQUFVUCxHQUFRMUIsT0FBTzJLLFNBQVMySSxVQUMzQ3JRLE1BQU8sU0FBVXZCLEdBQVExQixPQUFPMkssU0FBUzJJLGVBSXJEek0sVUFBVyxXQUNQaEcsb0JBMldaZCxFQUFFLHNCQUFzQmtHLE1BQU07QUFDMUJqRyxPQUFPdVQsVUErTVh4VCxFQUFFLHdCQUF3QkUsR0FBRyxRQUFTLFdBQ2xDLEdBQUl1VCxHQUFLelQsRUFBRThGLE1BQU15QyxTQUFTQSxTQUFTQSxTQUFTQSxTQUFTOUYsS0FBSyxLQUV0RHpDLEdBQUU4RixNQUFNc0UsR0FBRyxhQUNQcEssRUFBRSxJQUFNeVQsRUFBSyxvQkFBb0JsUixRQUNqQ3ZDLEVBQUUsU0FBV3lULEVBQUssbUJBQW1CeE8sWUFFekNqRixFQUFFLElBQU15VCxFQUFLLG9CQUFvQjlRLEtBQUssV0FDbEMzQyxFQUFFOEYsTUFBTStFLEtBQUssV0FBVyxPQUc1QjdLLEVBQUUsSUFBTXlULEVBQUssb0JBQW9COVEsS0FBSyxXQUNsQzNDLEVBQUU4RixNQUFNK0UsS0FBSyxXQUFXLEtBRXhCN0ssRUFBRSxJQUFNeVQsRUFBSyxvQkFBb0JsUixRQUNqQ3ZDLEVBQUUsU0FBV3lULEVBQUssbUJBQW1Cdk8sYUFNakRsRixFQUFFLGdDQUFnQzBULE9BQU8sV0FFckMsR0FBSUMsR0FBUzNULEVBQUU4RixNQUFNeUMsU0FBU0EsU0FBU0EsU0FDbkNxTCxFQUFZQyxjQUFjLG1CQUFvQkYsRUFBT2hTLEtBQUssVUFFMURpUyxHQUFZakQsU0FBU0MsUUFBaUMsR0FBdkIrQyxFQUFPaFMsS0FBSyxTQUF5QyxHQUF6QmdTLEVBQU9oUyxLQUFLLFdBQThDLEdBQTVCZ1MsRUFBT2hTLEtBQUssY0FDckc0SCxNQUFNdkgsRUFBRXFCLElBQUlDLGdCQUFnQndRLFlBS3BDLElBQUlELGVBQWdCLFNBQVVFLEVBQUkzVCxHQUU5QixHQUFJZSxJQUFTLE9BQVEsU0FBVSxRQUFTLFFBQVMsVUFFakRnUixPQUFRblMsRUFBRStULEVBQUszVCxFQUdmLElBQUk0VCxHQUFPLEVBYVgsT0FaQWhVLEdBQUUyQyxLQUFLeEIsRUFBTyxTQUFVeUIsRUFBR0MsR0FDdkJtUixHQUFRN0IsTUFBTThCLEtBQUssUUFBVTdULEVBQVV5QyxFQUFJLHFCQUFxQnVCLE9BQ3RELFVBQU52QixFQUNBbVIsR0FBUSxJQUNLLFVBQU5uUixFQUNQbVIsR0FBUSxJQUNLLFlBQU5uUixJQUNQbVIsR0FBUSxPQUtUckQsT0FBT3FELEVBQU0sc0JBQXNCcEQsV0FHbkRzRCIsImZpbGUiOiJ0dXJuaXRpbnRvb2x0d28ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgkKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiLmpzX3JlcXVpcmVkXCIpLnNob3coKTtcbiAgICAgICAgJChcIi5qc19oaWRlXCIpLmhpZGUoKTtcblxuICAgICAgICAvLyBDb25maWd1cmUgc3VibWl0IHBhcGVyIGZvcm0gZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdoYXQgc3VibWlzc2lvbiB0eXBlIGlzIGFsbG93ZWQuXG4gICAgICAgIGlmICgkKFwiI2lkX3N1Ym1pc3Npb250eXBlXCIpLnZhbCgpID09IDEpIHtcbiAgICAgICAgICAgICQoXCIjaWRfc3VibWlzc2lvbnRleHRcIikucGFyZW50KCkucGFyZW50KCkuaGlkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQoXCIjaWRfc3VibWlzc2lvbnR5cGVcIikudmFsKCkgPT0gMikge1xuICAgICAgICAgICAgJChcIiNpZF9zdWJtaXNzaW9uZmlsZVwiKS5wYXJlbnQoKS5wYXJlbnQoKS5oaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNhYmxlIGFzc2lnbm1lbnQgc3VibWlzc2lvbiBpZiBhIHN1Ym1pc3Npb24gYWdyZWVtZW50IGV4aXN0cyBhbmQgaXMgbm90IGNoZWNrZWQuXG4gICAgICAgIGlmICgoJChcIiNpZF9zdWJtaXNzaW9uYWdyZWVtZW50XCIpLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICQoJyNpZF9zdWJtaXRidXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzYWJsZS9lbmFibGUgYXNzaWdubWVudCBzdWJtaXNzaW9uIHdoZW4gdGhlIHN1Ym1pc3Npb24gY2hlY2tib3ggaXMgY2hlY2tlZC91bmNoZWNrZWQuXG4gICAgICAgICQoJyNpZF9zdWJtaXNzaW9uYWdyZWVtZW50Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICAkKCcjaWRfc3VibWlzc2lvbmFncmVlbWVudCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjaWRfc3VibWl0YnV0dG9uJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnI2lkX3N1Ym1pc3Npb25hZ3JlZW1lbnQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2lkX3N1Ym1pdGJ1dHRvbicpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZGVsZXRlX3BhcGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBjb25maXJtIHdpbmRvdy5cbiAgICAgICAgICAgIHZhciBjb25maXJtc3RybmFtZSA9ICQodGhpcykuZGF0YShcImNvbmZpcm1cIik7XG4gICAgICAgICAgICB2YXIgY29uZmlybXN0ciA9IE0uc3RyLnR1cm5pdGludG9vbHR3b1tjb25maXJtc3RybmFtZV0ucmVwbGFjZSgvXFxcXG4vZywgXCJcXG5cIik7XG4gICAgICAgICAgICB2YXIgY29uZmlybXJlc3VsdCA9IGNvbmZpcm0oY29uZmlybXN0cik7XG5cbiAgICAgICAgICAgIGlmIChjb25maXJtcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCJhamF4LnBocFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJodG1sXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2RlbGV0ZXN1Ym1pc3Npb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2tleTogTS5jZmcuc2Vzc2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcGVyOiAkKHRoaXMpLmRhdGEoXCJwYXBlclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQ6ICQodGhpcykuZGF0YShcInBhcnRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50OiAkKHRoaXMpLmRhdGEoXCJhc3NpZ25tZW50XCIpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5zdWJtaXRfbm90aGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwiZGlzYWJsZWRcIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgdmFyIHBhcnRfaWQgPSAkKHRoaXMpLnByb3AoJ2lkJykuc3BsaXQoJ18nKVsyXTtcbiAgICAgICAgICAgIHZhciBzdHVkZW50X2lkID0gJCh0aGlzKS5wcm9wKCdpZCcpLnNwbGl0KCdfJylbM107XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IE0uc3RyLnR1cm5pdGludG9vbHR3by5zdWJtaXRub3RoaW5nd2FybmluZy5yZXBsYWNlKC88YnI+L2csIFwiXFxuXCIpLnJlcGxhY2UoLyYjMzk7L2csIFwiXFwnXCIpO1xuICAgICAgICAgICAgdmFyIGNvb2tpZXNlZW4gPSAkLmNvb2tpZSgnc3VibWl0bm90aGluZ2FjY2VwdCcpO1xuICAgICAgICAgICAgaWYgKGNvb2tpZXNlZW4gfHwgY29uZmlybShtZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdE5vdGhpbmcoc3R1ZGVudF9pZCwgcGFydF9pZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIHN1Ym1pdCBwYXBlciBmb3JtIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aGF0IHN1Ym1pc3Npb24gdHlwZSBpcyBzZWxlY3RlZC5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NoYW5nZScsICcjaWRfc3VibWlzc2lvbnR5cGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJChcIiNpZF9zdWJtaXNzaW9udHlwZVwiKS52YWwoKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgJChcIiNpZF9zdWJtaXNzaW9udGV4dFwiKS5wYXJlbnQoKS5wYXJlbnQoKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJChcIiNpZF9zdWJtaXNzaW9uZmlsZVwiKS5wYXJlbnQoKS5wYXJlbnQoKS5zaG93KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkKFwiI2lkX3N1Ym1pc3Npb250eXBlXCIpLnZhbCgpID09IDIpIHtcbiAgICAgICAgICAgICAgICAkKFwiI2lkX3N1Ym1pc3Npb25maWxlXCIpLnBhcmVudCgpLnBhcmVudCgpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKFwiI2lkX3N1Ym1pc3Npb250ZXh0XCIpLnBhcmVudCgpLnBhcmVudCgpLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGlmIHN1Ym1pc3Npb24gcGFzc2VzIHZhbGlkYXRpb24uXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnLnN1Ym1pc3Npb25fZm9ybV9jb250YWluZXIgZm9ybScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkKFwiI2lkX3N1Ym1pc3Npb250aXRsZVwiKS52YWwoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgJChcIiNnZW5lcmFsXCIpLnNsaWRlVXAoJ3Nsb3cnKTtcbiAgICAgICAgICAgICAgICAkKFwiLm1vZF90dXJuaXRpbnRvb2x0d28gLm5vdGljZWJveFwiKS5zbGlkZVVwKCdzbG93Jyk7XG4gICAgICAgICAgICAgICAgJChcIi5zdWJtaXNzaW9uX2Zvcm1fY29udGFpbmVyIGZvcm1cIikuc2xpZGVVcCgnc2xvdycpO1xuICAgICAgICAgICAgICAgICQoXCIjc3VibWl0dGluZ19sb2FkZXJcIikuc2xpZGVEb3duKCdzbG93Jyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIGFuZCBzZXQgY29va2llIGZvciBzaG93aW5nIHRoZSBzdW1tYXJ5IGZvciB0aGlzIGFzc2lnbm1lbnQuXG4gICAgICAgIGlmICgkKCcudG9nZ2xlX3N1bW1hcnknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoISQuY29va2llKCdzaG93X3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKSkge1xuICAgICAgICAgICAgICAgICQuY29va2llKCdzaG93X3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpLCB0cnVlLCB7IGV4cGlyZXM6IDMwIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJC5jb29raWUoJ3Nob3dfc3VtbWFyeV8nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgJCgnLmhpZGVfc3VtbWFyeV8nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLnNob3coKTtcbiAgICAgICAgICAgICAgICAkKCcuc2hvd19zdW1tYXJ5XycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQoJy5pbnRyb2R1Y3Rpb24nKS5zbGlkZURvd24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnLnNob3dfc3VtbWFyeV8nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLnNob3coKTtcbiAgICAgICAgICAgICAgICAkKCcuaGlkZV9zdW1tYXJ5XycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQoJy5pbnRyb2R1Y3Rpb24nKS5zbGlkZVVwKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBTdW1tYXJ5IGRpc3BsYXkgb24gSW5ib3guXG4gICAgICAgICAgICAkKCcudG9nZ2xlX3N1bW1hcnkgaScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2hvd19zdW1tYXJ5XycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5jb29raWUoJ3Nob3dfc3VtbWFyeV8nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCksIHRydWUsIHsgZXhwaXJlczogMzAgfSk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zaG93X3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oaWRlX3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5pbnRyb2R1Y3Rpb24nKS5zbGlkZURvd24oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkLmNvb2tpZSgnc2hvd19zdW1tYXJ5XycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgZmFsc2UsIHsgZXhwaXJlczogMzAgfSk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zaG93X3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oaWRlX3N1bW1hcnlfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5pbnRyb2R1Y3Rpb24nKS5zbGlkZVVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXNlIGFuZCBzZXQgY29va2llIGZvciBzaG93aW5nIHRoZSBwZWVybWFyayBhc3NpZ25tZW50cyBmb3IgdGhpcyBhc3NpZ25tZW50LlxuICAgICAgICBpZiAoJCgnLnRvZ2dsZV9wZWVybWFya3MnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoISQuY29va2llKCdzaG93X3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpKSB7XG4gICAgICAgICAgICAgICAgJC5jb29raWUoJ3Nob3dfcGVlcm1hcmtzXycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgdHJ1ZSwgeyBleHBpcmVzOiAzMCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCQuY29va2llKCdzaG93X3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgJCgnLmhpZGVfcGVlcm1hcmtzXycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICQoJy5zaG93X3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKCcucGVlcm1hcmtfYXNzaWdubWVudHNfY29udGFpbmVyJykuc2xpZGVEb3duKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJy5zaG93X3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLnNob3coKTtcbiAgICAgICAgICAgICAgICAkKCcuaGlkZV9wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJCgnLnBlZXJtYXJrX2Fzc2lnbm1lbnRzX2NvbnRhaW5lcicpLnNsaWRlVXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIFBlZXJtYXJrcyBkaXNwbGF5IG9uIEluYm94LlxuICAgICAgICAgICAgJCgnLnRvZ2dsZV9wZWVybWFya3MgaScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAkLmNvb2tpZSgnc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpLCB0cnVlLCB7IGV4cGlyZXM6IDMwIH0pO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oaWRlX3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnBlZXJtYXJrX2Fzc2lnbm1lbnRzX2NvbnRhaW5lcicpLnNsaWRlRG93bigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQuY29va2llKCdzaG93X3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCksIGZhbHNlLCB7IGV4cGlyZXM6IDMwIH0pO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oaWRlX3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnBlZXJtYXJrX2Fzc2lnbm1lbnRzX2NvbnRhaW5lcicpLnNsaWRlVXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuc2hvd19wZWVybWFya19pbnN0cnVjdGlvbnMsIC5oaWRlX3BlZXJtYXJrX2luc3RydWN0aW9ucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpZFN0ciA9ICQodGhpcykuYXR0cignaWQnKS5zcGxpdChcIl9cIik7XG5cbiAgICAgICAgICAgIGlmIChpZFN0clswXSA9PSBcInNob3dcIikge1xuICAgICAgICAgICAgICAgICQoJyNzaG93X3BlZXJtYXJrX2luc3RydWN0aW9uc18nICsgaWRTdHJbM10pLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKCcjaGlkZV9wZWVybWFya19pbnN0cnVjdGlvbnNfJyArIGlkU3RyWzNdKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgJCgnI3BlZXJtYXJrX2luc3RydWN0aW9uc18nICsgaWRTdHJbM10pLnNsaWRlRG93bigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjc2hvd19wZWVybWFya19pbnN0cnVjdGlvbnNfJyArIGlkU3RyWzNdKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgJCgnI2hpZGVfcGVlcm1hcmtfaW5zdHJ1Y3Rpb25zXycgKyBpZFN0clszXSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQoJyNwZWVybWFya19pbnN0cnVjdGlvbnNfJyArIGlkU3RyWzNdKS5zbGlkZVVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNob3cgb3B0aW9ucyBmb3IgcGFydHMgaW4gbW9kX2Zvcm0ucGhwLlxuICAgICAgICBzaG93UGFydERhdGVzQm94ZXMoKTtcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NoYW5nZScsICcjaWRfbnVtcGFydHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaG93UGFydERhdGVzQm94ZXMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hbnVhbCBhY3RpdmF0aW9uIG9mIHNvcnRpbmcgYmFzZWQgb24gZmlyc3Qgb3IgbGFzdCBuYW1lLlxuICAgICAgICAgKiBUaGlzIGJvcnJvd3MgY2xhc3NlcyBmcm9tIGRhdGF0YWJsZXMgYW5kIGFwcGxpZXMgdGhlbSB0byB0d28gZGl2cyBpbnNpZGUgdGhlIHN0dWRlbnQgbmFtZSBjb2x1bW4gaGVhZGVyLlxuICAgICAgICAgKiBJbiBvcmRlciB0byBzb3J0IGJ5IGxhc3QgbmFtZSBpdCByZWZlcmVuY2VzIGEgaGlkZGVuIGNvbHVtbiBpbiBwb3NpdGlvbiAyLlxuICAgICAgICAgKi9cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5zcGxpdHRlci1sYXN0bmFtZSwgLnNwbGl0dGVyLWZpcnN0bmFtZScsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9ICQoZXZlbnQudGFyZ2V0KSxcbiAgICAgICAgICAgICAgICBpc0FzY2VuZGluZyA9IG5vZGUuaGFzQ2xhc3MoJ3NvcnRpbmdfYXNjJyksXG4gICAgICAgICAgICAgICAgY3VycmVudHNvcnQgPSAnYXNjJywgc29ydGJ5ID0gJ2Rlc2MnLFxuICAgICAgICAgICAgICAgIHNvcnRDb2x1bW4gPSBub2RlLmF0dHIoJ2RhdGEtY29sJyk7XG5cbiAgICAgICAgICAgIGlmICghaXNBc2NlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50c29ydCA9ICdkZXNjJztcbiAgICAgICAgICAgICAgICBzb3J0YnkgPSAnYXNjJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZS5jbG9zZXN0KCcuc3VibWlzc2lvbnNEYXRhVGFibGUnKS5EYXRhVGFibGUoKVxuICAgICAgICAgICAgICAgIC5vcmRlciggWyBzb3J0Q29sdW1uLCBzb3J0YnkgXSApXG4gICAgICAgICAgICAgICAgLmRyYXcoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbm9kZS5hZGRDbGFzcygnc29ydGluZ18nICsgc29ydGJ5KS5yZW1vdmVDbGFzcygnc29ydGluZyBzb3J0aW5nXycgKyBjdXJyZW50c29ydCk7XG4gICAgICAgICAgICBub2RlLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdzb3J0aW5nIHNvcnRpbmdfYXNjIHNvcnRpbmdfZGVzYycpO1xuICAgICAgICAgICAgbm9kZS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdzb3J0aW5nX2FzYyBzb3J0aW5nX2Rlc2MnKS5hZGRDbGFzcygnc29ydGluZycpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBY3RpdmF0ZSBzaW1wbGUgZGF0YVRhYmxlcy5cbiAgICAgICAgaWYgKCQoXCIjZGF0YVRhYmxlXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoXCIjZGF0YVRhYmxlXCIpLmRhdGFUYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIGRhdGF0YWJsZXMgbGFuZ3VhZ2Ugc2V0dGluZ3MuXG4gICAgICAgIGlmICh0eXBlb2YgTS5zdHIudHVybml0aW50b29sdHdvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGRhdGFUYWJsZXNMYW5nID0ge1xuICAgICAgICAgICAgICAgIFwic1Byb2Nlc3NpbmdcIjogJzxzcGFuIGNsYXNzPVwibG9hZGluZy1tZXNzYWdlXCI+JyArIE0uc3RyLnR1cm5pdGludG9vbHR3by5zcHJvY2Vzc2luZyArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICBcInNaZXJvUmVjb3Jkc1wiOiBNLnN0ci50dXJuaXRpbnRvb2x0d28uc3plcm9yZWNvcmRzLFxuICAgICAgICAgICAgICAgIFwic0luZm9cIjogTS5zdHIudHVybml0aW50b29sdHdvLnNpbmZvLFxuICAgICAgICAgICAgICAgIFwic1NlYXJjaFwiOiBNLnN0ci50dXJuaXRpbnRvb2x0d28uc3NlYXJjaCxcbiAgICAgICAgICAgICAgICBcInNMZW5ndGhNZW51XCI6IE0uc3RyLnR1cm5pdGludG9vbHR3by5zbGVuZ3RobWVudSxcbiAgICAgICAgICAgICAgICBcIm9QYWdpbmF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwic05leHRcIjogTS5zdHIudHVybml0aW50b29sdHdvLnNuZXh0LFxuICAgICAgICAgICAgICAgICAgICBcInNQcmV2aW91c1wiOiBNLnN0ci50dXJuaXRpbnRvb2x0d28uc3ByZXZpb3VzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFjdGl2YXRlIGRhdGF0YWJsZSB0YWJzIG9uIHN1Ym1pc3Npb24gaW5ib3guXG4gICAgICAgIGlmICgkKFwiI3RhYnNcIikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gU2V0IHRhYiBwb3NpdGlvbi5cbiAgICAgICAgICAgIHZhciBhY3RpdmVUYWIgPSAwO1xuICAgICAgICAgICAgaWYgKCQoXCIjdGFiX3Bvc2l0aW9uXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYWIgPSAkKCcjdGFiX3Bvc2l0aW9uJykudGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChcIiN0YWJzXCIpLnRhYnMoe1xuICAgICAgICAgICAgICAgIFwiYWN0aXZlXCI6IGFjdGl2ZVRhYixcbiAgICAgICAgICAgICAgICBcInNob3dcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSAkLmZuLmRhdGFUYWJsZS5mblRhYmxlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGFibGUpLmRhdGFUYWJsZSgpLmZuQWRqdXN0Q29sdW1uU2l6aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbmZpZ3VyZSB0aGUgZGF0YXRhYmxlIGZvciBhZGRpbmcvcmVtb3ZpbmcgZW5yb2xsZWQgdHV0b3JzL3N0dWRlbnRzIHRvIGEgVHVybml0aW4gY291cnNlLlxuICAgICAgICBpZiAoJCgnLmVucm9sbGVkTWVtYmVycycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy5lbnJvbGxlZE1lbWJlcnMnKS5kYXRhVGFibGUoe1xuICAgICAgICAgICAgICAgIFwiYlByb2Nlc3NpbmdcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInNBamF4U291cmNlXCI6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBcImFvQ29sdW1uRGVmc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgXCJiU29ydGFibGVcIjogZmFsc2UsIFwic0NsYXNzXCI6IFwiY2VudGVyZWRfY2VsbFwiLCBcImFUYXJnZXRzXCI6IFswXSB9LFxuICAgICAgICAgICAgICAgICAgICB7IFwic0NsYXNzXCI6IFwibGVmdFwiLCBcImFUYXJnZXRzXCI6IFsxXSB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcIm9MYW5ndWFnZVwiOiBkYXRhVGFibGVzTGFuZyxcbiAgICAgICAgICAgICAgICBcImZuU2VydmVyRGF0YVwiOiBmdW5jdGlvbiAoc1NvdXJjZSwgYW9EYXRhLCBmbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFUeXBlXCI6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IHNTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogeyBhY3Rpb246IFwiZ2V0X21lbWJlcnNcIiwgYXNzaWdubWVudDogJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCksIHJvbGU6ICQoJyN1c2VyX3JvbGUnKS5odG1sKCkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm5DYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXJyb3JcIjogZnVuY3Rpb24gKGRhdGEsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmRhdGFUYWJsZXNfcHJvY2Vzc2luZycpLmF0dHIoJ3N0eWxlJywgJ3Zpc2liaWxpdHk6IGhpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kYXRhVGFibGVzX2VtcHR5JykuaHRtbChNLnN0ci50dXJuaXRpbnRvb2x0d28ubWVtYmVyY2hlY2tlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIHRoZSBkYXRhdGFibGVzIG9uIHRoZSBzdWJtaXNzaW9uIGluYm94LCBhIHNlcGVyYXRlIGRhdGF0YWJsZSBpcyBzaG93biBmb3IgZWFjaCBwYXJ0LlxuICAgICAgICAvLyBUaGVyZSBhcmUgdGFicyB0byB0b2dnbGUgd2hpY2ggcGFydCB0YWJsZSBpcyBkaXNwbGF5ZWQuXG5cbiAgICAgICAgLy8gRGVmaW5lIGNvbHVtbiBkZWZpbml0aW9ucyBhcyB0aGVyZSBjYW4gYmUgZGlmZmVyZW50IG51bWJlciBvZiBjb2x1bW5zLlxuICAgICAgICB2YXIgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zID0gW107XG4gICAgICAgIHZhciB2aXNpYmxlQ29scyA9IFtdO1xuICAgICAgICB2YXIgbm9PZkNvbHVtbnMgPSAkKCd0YWJsZS5zdWJtaXNzaW9uc0RhdGFUYWJsZSB0aCcpLmxlbmd0aCAvICQoJ3RhYmxlLnN1Ym1pc3Npb25zRGF0YVRhYmxlJykubGVuZ3RoO1xuICAgICAgICB2YXIgbm90U3R1ZGVudFZpZXcgPSAoJCgndGFibGUuc3VibWlzc2lvbnNEYXRhVGFibGUgdGguc29ydGluZ19uYW1lJykubGVuZ3RoID4gMCkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciBzaG93T3JpZ1JlcG9ydCA9ICgkKCd0YWJsZS5zdWJtaXNzaW9uc0RhdGFUYWJsZSB0aC5jcmVwb3J0JykubGVuZ3RoID4gMCkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciB1c2VHcmFkZU1hcmsgPSAoJCgndGFibGUuc3VibWlzc2lvbnNEYXRhVGFibGUgdGguY2dyYWRlJykubGVuZ3RoID4gMCkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciBtdWx0aXBsZVBhcnRzID0gKCQoJ3RhYmxlLnN1Ym1pc3Npb25zRGF0YVRhYmxlIHRoLmNvdmVyYWxsZ3JhZGUnKS5sZW5ndGggPiAwKSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICBpZiAobm90U3R1ZGVudFZpZXcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9PZkNvbHVtbnM7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcInNUeXBlXCI6IFwic3RyaW5nXCIsIFwiYlNvcnRhYmxlXCI6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25zRGF0YVRhYmxlQ29sdW1ucy5wdXNoKHsgXCJzVHlwZVwiOiBcInN0cmluZ1wiLCBcImJTb3J0YWJsZVwiOiBmYWxzZSwgXCJiVmlzaWJsZVwiOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZUNvbHMucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcImlEYXRhU29ydFwiOiBpIC0gMSwgXCJzVHlwZVwiOiBcInN0cmluZ1wiIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25zRGF0YVRhYmxlQ29sdW1ucy5wdXNoKHsgXCJzQ2xhc3NcIjogXCJyaWdodFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSA4IHx8IChpID09IDEwICYmIHNob3dPcmlnUmVwb3J0KSB8fCAoKGkgPT0gMTAgJiYgIXNob3dPcmlnUmVwb3J0KSB8fCAoaSA9PSAxMiAmJiB1c2VHcmFkZU1hcmspKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaW9uc0RhdGFUYWJsZUNvbHVtbnMucHVzaCh7IFwic0NsYXNzXCI6IFwicmlnaHRcIiwgXCJpRGF0YVNvcnRcIjogaSAtIDEsIFwic1R5cGVcIjogXCJudW1lcmljXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVDb2xzLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoaSA9PSAxMyAmJiBzaG93T3JpZ1JlcG9ydCkgfHwgKGkgPT0gMTIgJiYgIXNob3dPcmlnUmVwb3J0KSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaW9uc0RhdGFUYWJsZUNvbHVtbnMucHVzaCh7IFwic0NsYXNzXCI6IFwicmlnaHRcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZUNvbHMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gMSB8fCAoKGkgPj0gOSAmJiAhc2hvd09yaWdSZXBvcnQgJiYgIXVzZUdyYWRlTWFyaylcbiAgICAgICAgICAgICAgICAgICAgfHwgKGkgPj0gMTEgJiYgKCghc2hvd09yaWdSZXBvcnQgJiYgdXNlR3JhZGVNYXJrKSB8fCAoc2hvd09yaWdSZXBvcnQgJiYgIXVzZUdyYWRlTWFyaykpKVxuICAgICAgICAgICAgICAgICAgICB8fCAoaSA+PSAxMyAmJiBzaG93T3JpZ1JlcG9ydCAmJiB1c2VHcmFkZU1hcmspKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaW9uc0RhdGFUYWJsZUNvbHVtbnMucHVzaCh7IFwic0NsYXNzXCI6IFwiY2VudGVyXCIsIFwiYlNvcnRhYmxlXCI6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGkgPT0gMCkgfHwgKGkgPT0gNCkgfHwgKGkgPT0gNykgfHwgKGkgPT0gOSAmJiBzaG93T3JpZ1JlcG9ydCkgfHwgKChpID09IDkgJiYgIXNob3dPcmlnUmVwb3J0KSB8fCAoaSA9PSAxMSAmJiB1c2VHcmFkZU1hcmspKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaW9uc0RhdGFUYWJsZUNvbHVtbnMucHVzaCh7IFwiYlZpc2libGVcIjogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVDb2xzLnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9PZkNvbHVtbnM7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVDb2xzLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcImlEYXRhU29ydFwiOiBpIC0gMSwgXCJzVHlwZVwiOiBcInN0cmluZ1wiIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25zRGF0YVRhYmxlQ29sdW1ucy5wdXNoKHsgXCJzQ2xhc3NcIjogXCJyaWdodFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSA3IHx8IChpID09IDkgJiYgc2hvd09yaWdSZXBvcnQpIHx8ICgoaSA9PSA5ICYmICFzaG93T3JpZ1JlcG9ydCkgfHwgKGkgPT0gMTEgJiYgdXNlR3JhZGVNYXJrKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcInNDbGFzc1wiOiBcInJpZ2h0XCIsIFwiaURhdGFTb3J0XCI6IGkgLSAxLCBcInNUeXBlXCI6IFwibnVtZXJpY1wiIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGkgPT0gMTIgJiYgc2hvd09yaWdSZXBvcnQpIHx8IChpID09IDExICYmICFzaG93T3JpZ1JlcG9ydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcInNDbGFzc1wiOiBcInJpZ2h0XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVDb2xzLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDEgfHwgKChpID49IDggJiYgIXNob3dPcmlnUmVwb3J0ICYmICF1c2VHcmFkZU1hcmspXG4gICAgICAgICAgICAgICAgICAgIHx8IChpID49IDEwICYmICgoIXNob3dPcmlnUmVwb3J0ICYmIHVzZUdyYWRlTWFyaykgfHwgKHNob3dPcmlnUmVwb3J0ICYmICF1c2VHcmFkZU1hcmspKSlcbiAgICAgICAgICAgICAgICAgICAgfHwgKGkgPj0gMTIgJiYgc2hvd09yaWdSZXBvcnQgJiYgdXNlR3JhZGVNYXJrKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcInNDbGFzc1wiOiBcImNlbnRlclwiLCBcImJTb3J0YWJsZVwiOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZUNvbHMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChpID09IDApIHx8IChpID09IDMpIHx8IChpID09IDYpIHx8IChpID09IDggJiYgc2hvd09yaWdSZXBvcnQpIHx8ICgoaSA9PSA4ICYmICFzaG93T3JpZ1JlcG9ydCkgfHwgKGkgPT0gMTAgJiYgdXNlR3JhZGVNYXJrKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLnB1c2goeyBcImJWaXNpYmxlXCI6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29scy5wdXNoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFydFRhYmxlcyA9IFtdO1xuICAgICAgICB2YXIgcmVmcmVzaFJlcXVlc3RlZCA9IFtdO1xuICAgICAgICAkKCd0YWJsZS5zdWJtaXNzaW9uc0RhdGFUYWJsZScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcGFydF9pZCA9ICQodGhpcykuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgcmVmcmVzaFJlcXVlc3RlZFtwYXJ0X2lkXSA9IDA7XG5cbiAgICAgICAgICAgIHBhcnRUYWJsZXNbcGFydF9pZF0gPSAkKCd0YWJsZSMnICsgcGFydF9pZCkuZGF0YVRhYmxlKHtcbiAgICAgICAgICAgICAgICBcImJQcm9jZXNzaW5nXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJhb0NvbHVtbnNcIjogc3VibWlzc2lvbnNEYXRhVGFibGVDb2x1bW5zLFxuICAgICAgICAgICAgICAgIFwiYUxlbmd0aE1lbnVcIjogW1sxMCwgMjUsIDUwLCAxMDAsIC0xXSwgWzEwLCAyNSwgNTAsIDEwMCwgXCJBbGxcIl1dLFxuICAgICAgICAgICAgICAgIFwiYWFTb3J0aW5nXCI6IFtbMiwgXCJhc2NcIl0sIFs0LCBcImFzY1wiXV0sXG4gICAgICAgICAgICAgICAgXCJzQWpheFNvdXJjZVwiOiBcImFqYXgucGhwXCIsXG4gICAgICAgICAgICAgICAgXCJvTGFuZ3VhZ2VcIjogZGF0YVRhYmxlc0xhbmcsXG4gICAgICAgICAgICAgICAgXCJzRG9tXCI6ICdyPFwibGlzdGJhci1jb250YWluZXJcIjxcInRvcCBsaXN0YmFyIGNsZWFyZml4XCJsZj4+PFwiZHRfcGFnaW5hdGlvbiBjbGVhcmZpeFwicGk+dDxcImJvdHRvbVwiPjxcImR0X3BhZ2luYXRpb24gY2xlYXJmaXhcInBpPicsXG4gICAgICAgICAgICAgICAgXCJmblNlcnZlckRhdGFcIjogZnVuY3Rpb24gKHNTb3VyY2UsIGFvRGF0YSwgZm5DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVybFwiOiBzU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IHsgYWN0aW9uOiBcImluaXRpYWxpc2VfcmVkcmF3XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUVkaXRpbmdUZXh0KHBhcnRfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZm9yY2Ugc2hvd2luZyBvZiBsb2FkaW5nIGJhciBhcyBpZiB3ZSBwbGFjZSBmbkNhbGxiYWNrIGFmdGVyIHRoZSB0YWJsZSBpcyBwb3B1bGF0ZWQgaXQgaXMgd2lwZWQgd2hlbiByZWZyZXNoaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIHBhcnRfaWQgKyBcIl9wcm9jZXNzaW5nXCIpLmF0dHIoJ3N0eWxlJywgJ3Zpc2liaWxpdHk6IHZpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTdWJtaXNzaW9ucyhwYXJ0VGFibGVzW3BhcnRfaWRdLCAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgcGFydF9pZCwgMCwgcmVmcmVzaFJlcXVlc3RlZCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJiU3RhdGVTYXZlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJmblN0YXRlU2F2ZVwiOiBmdW5jdGlvbiAob1NldHRpbmdzLCBvRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocGFydF9pZCArICdEYXRhVGFibGVzJywgSlNPTi5zdHJpbmdpZnkob0RhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImZuU3RhdGVTYXZlUGFyYW1zXCI6IGZ1bmN0aW9uIChvU2V0dGluZ3MsIG9EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIG9EYXRhLmFiVmlzQ29scyA9IHZpc2libGVDb2xzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJmblN0YXRlTG9hZFwiOiBmdW5jdGlvbiAob1NldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwYXJ0X2lkICsgJ0RhdGFUYWJsZXMnKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJmblN0YXRlTG9hZFBhcmFtc1wiOiBmdW5jdGlvbiAob1NldHRpbmdzLCBvRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBvRGF0YS5hYlZpc0NvbHMgPSB2aXNpYmxlQ29scztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZm5EcmF3Q2FsbGJhY2tcIjogZnVuY3Rpb24gKG9TZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXNlRGlnaXRhbFJlY2VpcHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGlzZURWTGF1bmNoZXJzKFwiYWxsXCIsIDAsIHBhcnRfaWQsIDApO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXNlUmVmcmVzaFJvdyhcImFsbFwiLCAwLCBwYXJ0X2lkLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGlzZVVwbG9hZEJveChcImFsbFwiLCAwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGlzZVppcERvd25sb2FkcyhwYXJ0X2lkKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGlzZUNoZWNrYm94ZXMoMCwgcGFydF9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VVbmFub3ltaXNlRm9ybShcImFsbFwiLCAwLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAkKCd0YWJsZS5zdWJtaXNzaW9uc0RhdGFUYWJsZScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBhcnRfaWQgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKTtcblxuICAgICAgICAgICAgLy8gUG9wdWxhdGUgUGVlcm1hcmsgU2VjdGlvbiBvZiBQYXJ0IERldGFpbHMuXG4gICAgICAgICAgICByZWZyZXNoUGVlcm1hcmtBc3NpZ25tZW50cyhwYXJ0X2lkLCAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCQoJy5tZXNzYWdlc19hbW91bnQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZWZyZXNoVXNlck1lc3NhZ2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXBvc2l0aW9uIGxpbmtzL2RpdnMuXG4gICAgICAgICQoJy50aWlfdGFibGVfZnVuY3Rpb25zJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGFydF9pZCA9ICQodGhpcykuYXR0cignaWQnKS5zcGxpdCgndGlpX3RhYmxlX2Z1bmN0aW9uc18nKVsxXTtcblxuICAgICAgICAgICAgdmFyIHRpaV90YWJsZV9mdW5jdGlvbnMgPSAkKFwiI3RpaV90YWJsZV9mdW5jdGlvbnNfXCIgKyBwYXJ0X2lkKS5odG1sKCk7ICAgICAgICAgICAgXG4gICAgICAgICAgICAkKCcjdGlpX3RhYmxlX2Z1bmN0aW9uc18nICsgcGFydF9pZCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAkKCcjJyArIHBhcnRfaWQgKyAnX2xlbmd0aCcpLmFmdGVyKHRpaV90YWJsZV9mdW5jdGlvbnMpO1xuICAgICAgICAgICAgJCgnLm1lc3NhZ2VzX2luYm94Jykuc2hvdygpO1xuXG4gICAgICAgICAgICAkKCcjcmVmcmVzaF8nICsgcGFydF9pZCkuc2hvdygpO1xuICAgICAgICAgICAgJCgnI3JlZnJlc2hpbmdfJyArIHBhcnRfaWQpLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHppcF9kb3dubG9hZHMgPSAkKFwiLnppcF9kb3dubG9hZHNcIik7XG5cbiAgICAgICAgJC5lYWNoKHppcF9kb3dubG9hZHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0X2lkID0gJCh0aGlzKS5hdHRyKCdpZCcpLnNwbGl0KCdfJylbMV07XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgJCgnIycgKyBwYXJ0X2lkICsgJ19sZW5ndGgnKS5hZnRlcigkKHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCQoXCIjdXNlcl9yb2xlXCIpLmh0bWwoKSA9PSBcIkxlYXJuZXJcIikge1xuICAgICAgICAgICAgJChcIi5kYXRhVGFibGVzX2xlbmd0aCwgLmRhdGFUYWJsZXNfZmlsdGVyLCAuZHRfcGFnaW5hdGlvblwiKS5oaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSByZWZyZXNoIHN1Ym1pc3Npb25zIGxpbmsgaXMgY2xpY2tlZCwgdGhlIGRhdGEgaW4gZWFjaCBkYXRhdGFibGUgbmVlZHMgdG8gYmUgcmVsb2FkZWQuXG4gICAgICAgICQoXCIucmVmcmVzaF9saW5rXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAkKFwiLnJlZnJlc2hfbGlua1wiKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJChcIi5yZWZyZXNoaW5nX2xpbmtcIikuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgJCgndGFibGUuc3VibWlzc2lvbnNEYXRhVGFibGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFJlcXVlc3RlZFskKHRoaXMpLmF0dHIoXCJpZFwiKV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0VGFibGVzWyQodGhpcykuYXR0cihcImlkXCIpXS5mblJlbG9hZEFqYXgoKTtcbiAgICAgICAgICAgICAgICAgICAgcGFydFRhYmxlc1skKHRoaXMpLmF0dHIoXCJpZFwiKV0uZm5TdGFuZGluZ1JlZHJhdygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTeW5jIGFsbCBncmFkZXMgbGluayBpbiBzZXR0aW5ncyBwYWdlLlxuICAgICAgICBpZiAoJCgnI3R1cm5pdGluX3N5bmNfYWxsX2dyYWRlcycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy50dXJuaXRpbl9zeW5jX2dyYWRlcycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICQoJy50dXJuaXRpbl9zeW5jX2dyYWRlcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKCcudHVybml0aW5fc3luY2luZ19ncmFkZXMnKS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBNLmNmZy53d3dyb290ICsgXCIvbW9kL3R1cm5pdGludG9vbHR3by9hamF4LnBocFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aW9uOiBcInN5bmNfYWxsX3N1Ym1pc3Npb25zXCIsIGFzc2lnbm1lbnQ6ICQoJyN0dXJuaXRpbl9zeW5jX2FsbF9ncmFkZXMnKS5kYXRhKCd0dXJuaXRpbnRvb2x0d29pZCcpLCBzZXNza2V5OiBNLmNmZy5zZXNza2V5IH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcudHVybml0aW5fc3luY19ncmFkZXMnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcudHVybml0aW5fc3luY2luZ19ncmFkZXMnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzaXplIHdpbmRvdyBpZiBzdWJtaXNzaW9uIGhhcyBmYWlsZWQuXG4gICAgICAgIGlmICgkKCcuc3VibWlzc2lvbl9mYWlsdXJlX21zZycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuJCgnLnVwbG9hZF9ib3gnKS5jb2xvcmJveC5yZXNpemUoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjgwMHB4XCIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjI0MHB4XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5yb2wgYWxsIHN0dWRlbnRzIGxpbmsgb24gdGhlIGVucm9sbGVkIHN0dWRlbnRzIHBhZ2UuXG4gICAgICAgICQoXCIuZW5yb2xfbGlua1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKFwiI2Vucm9sbGluZ19lcnJvclwiKS5oaWRlKCk7XG4gICAgICAgICAgICAkKFwiLmVucm9sX2xpbmtcIikuaGlkZSgpO1xuICAgICAgICAgICAgJChcIi5lbnJvbGxpbmdfY29udGFpbmVyXCIpLnNob3coKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcImFqYXgucGhwXCIsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwiaHRtbFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aW9uOiBcImVucm9sX2FsbF9zdHVkZW50c1wiLCBhc3NpZ25tZW50OiAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgc2Vzc2tleTogTS5jZmcuc2Vzc2tleSB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGRhdGEsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIuZW5yb2xfbGlua1wiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIuZW5yb2xsaW5nX2NvbnRhaW5lclwiKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjZW5yb2xsaW5nX2Vycm9yXCIpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IGNvbnRhaW5pbmcgdGhlIFJ1YnJpYyBNYW5hZ2VyLlxuICAgICAgICBpZiAoJCgnLnJ1YnJpY19tYW5hZ2VyX2xhdW5jaCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy5ydWJyaWNfbWFuYWdlcl9sYXVuY2gnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI4MzJweFwiLCBoZWlnaHQ6IFwiNjgycHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcInJ1YnJpY19tYW5hZ2VyXCIsIHRyYW5zaXRpb246IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsaWdodEJveENsb3NlQnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldExvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIFJ1YnJpYyBkcm9wIGRvd24gaW4gYWRkL3VwZGF0ZSBmb3JtLlxuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKFwiaWRcIikgIT0gJ3J1YnJpY19tYW5hZ2VyX2luYm94X2xhdW5jaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hSdWJyaWNTZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkKCcjdGlpX2Nsb3NlX2JhcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IGNvbnRhaW5pbmcgdGhlIFJ1YnJpYyBWaWV3LlxuICAgICAgICBpZiAoJCgnLnJ1YnJpY192aWV3X2xhdW5jaCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy5ydWJyaWNfdmlld19sYXVuY2gnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI4MzJweFwiLCBoZWlnaHQ6IFwiNjgycHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcInJ1YnJpY192aWV3XCIsIHRyYW5zaXRpb246IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsaWdodEJveENsb3NlQnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldExvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjdGlpX2Nsb3NlX2JhcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyB3YXJuaW5nIHdoZW4gY2hhbmdpbmcgdGhlIHJ1YnJpYyBsaW5rZWQgdG8gYW4gYXNzaWdubWVudC5cbiAgICAgICAgJCgnI2lkX3J1YnJpYywgI2lkX3BsYWdpYXJpc21fcnVicmljJykubW91c2Vkb3duKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkKCdpbnB1dFtuYW1lPVwiaW5zdGFuY2VcIl0nKS52YWwoKSAhPSAnJyAmJiAkKCdpbnB1dFtuYW1lPVwicnVicmljX3dhcm5pbmdfc2VlblwiXScpLnZhbCgpICE9ICdZJykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKE0uc3RyLnR1cm5pdGludG9vbHR3by5jaGFuZ2VydWJyaWN3YXJuaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwicnVicmljX3dhcm5pbmdfc2VlblwiXScpLnZhbCgnWScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IGNvbnRhaW5pbmcgdGhlIFF1aWNrbWFyayBNYW5hZ2VyLlxuICAgICAgICBpZiAoJCgnLnF1aWNrbWFya19tYW5hZ2VyX2xhdW5jaCcpLmxlbmd0aCA+IDAgfHwgJCgnLnBsYWdpYXJpc21fdHVybml0aW5fcXVpY2ttYXJrX21hbmFnZXJfbGF1bmNoJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJCgnLnF1aWNrbWFya19tYW5hZ2VyX2xhdW5jaCwgLnBsYWdpYXJpc21fdHVybml0aW5fcXVpY2ttYXJrX21hbmFnZXJfbGF1bmNoJykuY29sb3Jib3goe1xuICAgICAgICAgICAgICAgIGlmcmFtZTogdHJ1ZSwgd2lkdGg6IFwiNzcwcHhcIiwgaGVpZ2h0OiBcIjYwMHB4XCIsIG9wYWNpdHk6IFwiMC43XCIsIGNsYXNzTmFtZTogXCJxdWlja21hcmtfbWFuYWdlclwiLCB0cmFuc2l0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlnaHRCb3hDbG9zZUJ1dHRvbigpO1xuICAgICAgICAgICAgICAgICAgICBnZXRMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3RpaV9jbG9zZV9iYXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wZW4gYW4gaWZyYW1lIGxpZ2h0IGJveCBjb250YWluaW5nIHRoZSBQZWVybWFyayBNYW5hZ2VyLlxuICAgICAgICBpZiAoJCgnLnRpaV9wZWVybWFya19tYW5hZ2VyX2xhdW5jaCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy50aWlfcGVlcm1hcmtfbWFuYWdlcl9sYXVuY2gnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI4MDJweFwiLCBoZWlnaHQ6IFwiNzcycHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcInBlZXJtYXJrX21hbmFnZXJcIiwgdHJhbnNpdGlvbjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNUQVJUIFVDTEEgTU9EOiBDQ0xFLTYyOTcgTGF1bmNoIHBlZXJtYXJrIG1hbmFnZXIgY2xvc2UgYnV0dG9uLlxuICAgICAgICAgICAgICAgICAgICAvL2xpZ2h0Qm94Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgc21hbGxUaWlDbG9zZUJ1dHRvbigpO1xuICAgICAgICAgICAgICAgICAgICAvLyBFTkQgVUNMQSBNT0Q6IENDTEUtNjI5Ny5cbiAgICAgICAgICAgICAgICAgICAgZ2V0TG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyN0aWlfY2xvc2VfYmFyJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsb3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWRTdHIgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQZWVybWFya0Fzc2lnbm1lbnRzKGlkU3RyWzJdLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wZW4gYW4gaWZyYW1lIGxpZ2h0IGJveCBjb250YWluaW5nIHRoZSBQZWVybWFyayBSZXZpZXdzLlxuICAgICAgICBpZiAoJCgnLnRpaV9wZWVybWFya19yZXZpZXdzX2xhdW5jaCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy50aWlfcGVlcm1hcmtfcmV2aWV3c19sYXVuY2gnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI4MDJweFwiLCBoZWlnaHQ6IFwiNzcycHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcInBlZXJtYXJrX3Jldmlld3NcIiwgdHJhbnNpdGlvbjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0Qm94Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyN0aWlfY2xvc2VfYmFyJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPcGVuIGFuIGlmcmFtZSBsaWdodCBib3ggY29udGFpbmluZyB0aGUgdHVybml0aW4gbWVzc2FnZSBpbmJveC5cbiAgICAgICAgaWYgKCQoXCIubWVzc2FnZXNfaW5ib3hcIikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJChcIi5tZXNzYWdlc19pbmJveFwiKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI3NzJweFwiLCBoZWlnaHQ6IFwiNzcycHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcIm1lc3NhZ2VzXCIsIHRyYW5zaXRpb246IFwibm9uZVwiLCBjbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlnaHRCb3hDbG9zZUJ1dHRvbigpO1xuICAgICAgICAgICAgICAgICAgICBnZXRMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3RpaV9jbG9zZV9iYXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wZW4gYW4gaWZyYW1lIGxpZ2h0IGJveCBjb250YWluaW5nIHRoZSBmb3JtIHRvIG1lc3NhZ2Ugbm9uIHN1Ym1pdHRlcnMuXG4gICAgICAgIGlmICgkKFwiLm5vbnN1Ym1pdHRlcnNfbGlua1wiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkKFwiLm5vbnN1Ym1pdHRlcnNfbGlua1wiKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI3NDBweFwiLCBoZWlnaHQ6IFwiNTQwcHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcIm5vbnN1Ym1pdHRlcnNcIiwgdHJhbnNpdGlvbjogXCJub25lXCIsIGNsb3NlQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsaWdodEJveENsb3NlQnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldExvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjdGlpX2Nsb3NlX2JhcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzaXplIHdpbmRvdyB3aGVuIGVtYWlsIGhhcyBiZWVuIHNlbnQuXG4gICAgICAgIGlmICgkKCcubm9uc3VibWl0dGVyc2Zvcm1zdWNjZXNzbXNnJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaGlkZUxvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuJCgnLm5vbnN1Ym1pdHRlcnMnKS5jb2xvcmJveC5yZXNpemUoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjc0MHB4XCIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjEyMHB4XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IGNvbnRhaW5pbmcgdGhlIEVtYWlsIG5vbiBzdWJtaXR0ZXJzIGZvcm0uXG4gICAgICAgIGlmICgkKCcucnVicmljX3ZpZXdfbGF1bmNoJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJCgnLnJ1YnJpY192aWV3X2xhdW5jaCcpLmNvbG9yYm94KHtcbiAgICAgICAgICAgICAgICBpZnJhbWU6IHRydWUsIHdpZHRoOiBcIjgzMnB4XCIsIGhlaWdodDogXCI2ODJweFwiLCBvcGFjaXR5OiBcIjAuN1wiLCBjbGFzc05hbWU6IFwicnVicmljX3ZpZXdcIiwgdHJhbnNpdGlvbjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0Qm94Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyN0aWlfY2xvc2VfYmFyJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPcGVuIHRoZSBEViBpbiBhIG5ldyB3aW5kb3cgaW4gc3VjaCBhIHdheSBhcyB0byBub3QgYmUgYmxvY2tlZCBieSBwb3B1cHMuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZGVmYXVsdF9vcGVuLCAub3JpZ3JlcG9ydF9vcGVuLCAuZ3JhZGVtYXJrX29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2VlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgaWRTdHIgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICB2YXIgZHVlX2RhdGUgPSAkKCcjZGF0ZV9kdWVfJyArIGlkU3RyWzJdKS5odG1sKCk7XG4gICAgICAgICAgICB2YXIgZHVlX2RhdGVfdW5peCA9IG1vbWVudChkdWVfZGF0ZSkudW5peCgpO1xuXG4gICAgICAgICAgICB2YXIgZHZ0eXBlID0gaWRTdHJbMF07XG4gICAgICAgICAgICB2YXIgc3VibWlzc2lvbl9pZCA9IGlkU3RyWzFdO1xuICAgICAgICAgICAgdmFyIHBhcnRfaWQgPSBpZFN0clsyXTtcblxuICAgICAgICAgICAgLy8gU2hvdyByZXN1Ym1pc3Npb24gZ3JhZGUgd2FybmluZyBpZiB0aGUgZHVlIGRhdGUgaGFzIG5vdCBwYXNzZWQuXG4gICAgICAgICAgICBpZiAoZHVlX2RhdGVfdW5peCA+IG1vbWVudCgpLnVuaXgoKSkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdncmFkZWRfd2FybmluZycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29uZmlybShNLnN0ci50dXJuaXRpbnRvb2x0d28ucmVzdWJtaXNzaW9uZ3JhZGV3YXJuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAgICAgICAgIGR2V2luZG93ID0gd2luZG93Lm9wZW4oJycsICdfYmxhbmsnKTtcbiAgICAgICAgICAgICAgICB2YXIgbG9hZGluZyA9ICc8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCI+JztcbiAgICAgICAgICAgICAgICBsb2FkaW5nICs9ICc8aW1nIHNyYz1cIicgKyBNLmNmZy53d3dyb290ICsgJy9tb2QvdHVybml0aW50b29sdHdvL3BpeC90aWlJY29uLnN2Z1wiIHN0eWxlPVwid2lkdGg6MTAwcHg7IGhlaWdodDogMTAwcHhcIj4nO1xuICAgICAgICAgICAgICAgIGxvYWRpbmcgKz0gJzxwIHN0eWxlPVwiZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XCI+JyArIE0uc3RyLnR1cm5pdGludG9vbHR3by5sb2FkaW5nZHYgKyAnPC9wPic7XG4gICAgICAgICAgICAgICAgbG9hZGluZyArPSAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAkKGR2V2luZG93LmRvY3VtZW50LmJvZHkpLmh0bWwobG9hZGluZyk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgaHRtbCB0byBsYXVuY2ggRFYuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogTS5jZmcud3d3cm9vdCArIFwiL21vZC90dXJuaXRpbnRvb2x0d28vYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGFjdGlvbjogZHZ0eXBlLCBzdWJtaXNzaW9uOiBzdWJtaXNzaW9uX2lkLCBhc3NpZ25tZW50OiAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChkdldpbmRvdy5kb2N1bWVudC5ib2R5KS5odG1sKGxvYWRpbmcgKyBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR2V2luZG93LmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHZXaW5kb3cuZG9jdW1lbnQuY2xvc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tEVkNsb3NlZChwYXJ0X2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoJChcIiNpZF9ydWJyaWMsICNpZF9wbGFnaWFyaXNtX3J1YnJpY1wiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZWZyZXNoUnVicmljU2VsZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdmVycmlkZSBhbnkgdGhlbWUgdGhhdCBwdXRzIGEgYmFja2dyb3VuZCBvbiB0aGUgaHRtbCBlbGVtZW50IHdoaWNoIGdldHMgc2V0IG9uIGFuIGlmcmFtZS5cbiAgICAgICAgaWYgKHNlbGYgIT0gdG9wICYmICQoJyN2aWV3X2NvbnRleHQnKS5odG1sKCkgPT0gJ2JveCcpIHtcbiAgICAgICAgICAgICQoJ2h0bWwnKS5jc3MoJ2JhY2tncm91bmQnLCAnbm9uZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYgIT0gdG9wICYmICQoJyN2aWV3X2NvbnRleHQnKS5odG1sKCkgPT0gJ2JveF9zb2xpZCcpIHtcbiAgICAgICAgICAgICQoJ2h0bWwnKS5jc3MoJ2JhY2tncm91bmQnLCAnI0ZGRicpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnLmVkaXRhYmxlX3Bvc3RkdWUnKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ2Fub24nKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoTS5zdHIudHVybml0aW50b29sdHdvLnBvc3RkYXRlX3dhcm5pbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoJCgnLmVkaXRhYmxlX3RleHQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkLmZuLmVkaXRhYmxlLmRlZmF1bHRzLm1vZGUgPSAnaW5saW5lJztcbiAgICAgICAgICAgICQuZm4uZWRpdGFibGUuZGVmYXVsdHMudXJsID0gJ2FqYXgucGhwJztcbiAgICAgICAgICAgICQuZm4uZWRpdGFibGUuZGVmYXVsdHMub25ibHVyID0gJ3N1Ym1pdCc7XG4gICAgICAgICAgICAkLmZuLmVkaXRhYmxlLmRlZmF1bHRzLnNob3didXR0b25zID0gZmFsc2U7XG4gICAgICAgICAgICAkLmZuLmVkaXRhYmxlLmRlZmF1bHRzLmFqYXhPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCgnLmVkaXRhYmxlX3RleHQnKS5lZGl0YWJsZSh7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCdpZCcpLmluZGV4T2YoXCJtYXJrc19cIikgPj0gMCAmJiAoTWF0aC5mbG9vcih2YWx1ZSkgIT0gdmFsdWUgfHwgISQuaXNOdW1lcmljKHZhbHVlKSB8fCB2YWx1ZS5pbmRleE9mKFwiLlwiKSAhPSAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNLnN0ci50dXJuaXRpbnRvb2x0d28ubWF4bWFya3NlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5tc2c7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZmllbGQgPT0gXCJtYXhtYXJrc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVmcmVzaF8nICsgcmVzcG9uc2UucGFydGlkKS5jbGljaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGdyYWRlYm9vay5cbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBNLmNmZy53d3dyb290ICsgXCIvbW9kL3R1cm5pdGludG9vbHR3by9hamF4LnBocFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGFjdGlvbjogXCJzeW5jX2FsbF9zdWJtaXNzaW9uc1wiLCBhc3NpZ25tZW50OiAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgc2Vzc2tleTogTS5jZmcuc2Vzc2tleSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5maWVsZCA9PSBcInBhcnRuYW1lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJJZCA9ICQodGhpcykucGFyZW50c1VudGlsKCcudWktdGFicy1wYW5lbCcpLnBhcmVudCgpLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyB0YWJJZCkudGV4dChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCQoJyNleHBvcnRfb3B0aW9ucycpLmhhc0NsYXNzKCd0aWlfZXhwb3J0X29wdGlvbnNfaGlkZScpKSB7XG4gICAgICAgICAgICAgICAgJCgnI2V4cG9ydF9vcHRpb25zJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQoJy5leHBvcnRfZGF0YScpLmh0bWwoJzxzcGFuIGNsYXNzPVwiZW1wdHktZGFzaFwiPi0tPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcuZWRpdGFibGVfcG9zdGR1ZScpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCJhamF4LnBocFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aW9uOiAnY2hlY2tfYW5vbicsIHBhcnQ6ICR0aGlzLmRhdGEoJ3BrJyksIGFzc2lnbm1lbnQ6ICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdhbm9uJywgZGF0YVsnYW5vbiddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ3VuYW5vbicsIGRhdGFbJ3VuYW5vbiddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ3N1Ym1pdHRlZCcsIGRhdGFbJ3N1Ym1pdHRlZCddKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB0aGVEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICQoJy5lZGl0YWJsZV9kYXRlJykuZWRpdGFibGUoe1xuICAgICAgICAgICAgICAgICd0eXBlJzogJ2NvbWJvZGF0ZScsXG4gICAgICAgICAgICAgICAgJ2Zvcm1hdCc6ICdZWVlZLU1NLUREIEhIOm1tJyxcbiAgICAgICAgICAgICAgICAndmlld2Zvcm1hdCc6ICdEIE1NTSBZWVlZLCBISDptbScsXG4gICAgICAgICAgICAgICAgJ3RlbXBsYXRlJzogJ0QgTU1NIFlZWVkgIEhIOm1tJyxcbiAgICAgICAgICAgICAgICAnY29tYm9kYXRlJzoge1xuICAgICAgICAgICAgICAgICAgICAnbWludXRlU3RlcCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICdtaW5ZZWFyJzogMjAwMCxcbiAgICAgICAgICAgICAgICAgICAgJ21heFllYXInOiB0aGVEYXRlLmdldEZ1bGxZZWFyKCkgKyAyLFxuICAgICAgICAgICAgICAgICAgICAnc21hcnREYXlzJzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuZm9ybWF0KFwiWFwiKSA8IG1vbWVudCgpLnVuaXgoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oYXNDbGFzcygnZWRpdGFibGVfcG9zdGR1ZScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2Fub24nKSA9PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ3VuYW5vbicpID09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnc3VibWl0dGVkJykgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maXJtKE0uc3RyLnR1cm5pdGludG9vbHR3by5kaXNhYmxlYW5vbmNvbmZpcm0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmVkaXRhYmxlLW9wZW4nKS5lZGl0YWJsZUNvbnRhaW5lcignaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRpb24gb25seSBmYWlscyBpZiBzdHJpbmcgaXMgcmV0dXJuZWQgKFdlIG5lZWQgYSBzdHJpbmcpLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UubXNnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlZnJlc2hfJyArIHJlc3BvbnNlLnBhcnRpZCkuY2xpY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmV4cG9ydF9vcHRpb24gPT0gXCJ0aWlfZXhwb3J0X29wdGlvbnNfaGlkZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2V4cG9ydF9vcHRpb25zJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5leHBvcnRfZGF0YScpLmh0bWwoJzxzcGFuIGNsYXNzPVwiZW1wdHktZGFzaFwiPi0tPC9zcGFuPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZW1wdHktZGFzaCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNleHBvcnRfb3B0aW9ucycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcuZWRpdGFibGVfZGF0ZScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnZWRpdGFibGUtZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIERpc2FibGUgb3RoZXIgZWRpdGFibGUgZmllbGRzICYgR3JhZGluZyB0ZW1wbGF0ZSBzdWJtaXNzaW9ucyB3aGVuIGFuIGVkaXRhYmxlIGZvcm0gaXMgb3BlbmVkLlxuICAgICAgICAgICAgJCgnLmVkaXRhYmxlX2RhdGUsIC5lZGl0YWJsZV90ZXh0Jykub24oJ3Nob3duJywgZnVuY3Rpb24gKGUsIGVkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAoJCh0aGlzKS5wcm9wKCdpZCcpKTtcbiAgICAgICAgICAgICAgICAkKCcuZWRpdGFibGVfZGF0ZSwgLmVkaXRhYmxlX3RleHQnKS5ub3QoJyMnICsgY3VycmVudCkuZWRpdGFibGUoJ2Rpc2FibGUnKTtcbiAgICAgICAgICAgICAgICAkKCcuc3VibWl0X25vdGhpbmcnKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBFbmFibGUgb3RoZXIgZWRpdGFibGUgZmllbGRzICYgR3JhZGluZyB0ZW1wbGF0ZSBzdWJtaXNzaW9ucyB3aGVuIGFuIGVkaXRhYmxlIGZvcm0gaXMgY2xvc2VkLlxuICAgICAgICAgICAgJCgnLmVkaXRhYmxlX2RhdGUsIC5lZGl0YWJsZV90ZXh0Jykub24oJ2hpZGRlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICgkKHRoaXMpLnByb3AoJ2lkJykpO1xuICAgICAgICAgICAgICAgICQoJy5lZGl0YWJsZV9kYXRlLCAuZWRpdGFibGVfdGV4dCcpLm5vdCgnIycgKyBjdXJyZW50KS5lZGl0YWJsZSgnZW5hYmxlJyk7XG4gICAgICAgICAgICAgICAgJCgnLnN1Ym1pdF9ub3RoaW5nJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJyNpbmJveF9mb3JtIGZvcm0sIC5sYXVuY2hfZm9ybSBmb3JtJykuc3VibWl0KCk7XG5cbiAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IGNvbnRhaW5pbmcgdGhlIEVVTEEgLlxuICAgICAgICBpZiAoJCgnLnR1cm5pdGluX2V1bGFfbGluaycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy50dXJuaXRpbl9ldWxhX2xpbmsnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI3NjZweFwiLCBoZWlnaHQ6IFwiNTk2cHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcImV1bGFfdmlld1wiLCBzY3JvbGxpbmc6IFwiZmFsc2VcIixcbiAgICAgICAgICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHsgZ2V0TG9hZGluZ0dpZigpOyB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9uKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdHlwZW9mIGV2LmRhdGEgPT09ICd1bmRlZmluZWQnID8gZXYub3JpZ2luYWxFdmVudC5kYXRhIDogZXYuZGF0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IE0uY2ZnLnd3d3Jvb3QgKyBcIi9tb2QvdHVybml0aW50b29sdHdvL2FqYXgucGhwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aW9uOiBcImFjY2VwdHVzZXJhZ3JlZW1lbnRcIiwgbWVzc2FnZTogbWVzc2FnZSwgc2Vzc2tleTogTS5jZmcuc2Vzc2tleSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGRhdGEpIHsgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuYWJsZSB0aGUgZWRpdGluZyBmaWVsZHMgaW4gdGhlIGluYm94IHBhcnRzIHRhYmxlLlxuICAgICAgICBmdW5jdGlvbiBlbmFibGVFZGl0aW5nVGV4dChwYXJ0X2lkKSB7XG4gICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLmVkaXRhYmxlX2RhdGUsICN0YWJzLScgKyBwYXJ0X2lkICsgJyAuZWRpdGFibGVfdGV4dCcpLmVkaXRhYmxlKCdlbmFibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGVkaXRpbmcgZmllbGRzIGluIHRoZSBpbmJveCBwYXJ0cyB0YWJsZS5cbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZUVkaXRpbmdUZXh0KHBhcnRfaWQpIHtcbiAgICAgICAgICAgICQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAuZWRpdGFibGVfZGF0ZSwgI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5lZGl0YWJsZV90ZXh0JykuZWRpdGFibGUoJ2Rpc2FibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldExvYWRpbmdHaWYoKSB7XG4gICAgICAgICAgICB2YXIgaW1nID0gJzxkaXYgY2xhc3M9XCJsb2FkaW5nX2dpZlwiPjwvZGl2Pic7XG4gICAgICAgICAgICAkKCcjY2JveE92ZXJsYXknKS5hZnRlcihpbWcpO1xuICAgICAgICAgICAgdmFyIHRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSArICgkKHdpbmRvdykuaGVpZ2h0KCkgLyAyKTtcbiAgICAgICAgICAgICQoJy5sb2FkaW5nX2dpZicpLmNzcygndG9wJywgdG9wICsgJ3B4Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoaWRlTG9hZGluZ0dpZigpIHtcbiAgICAgICAgICAgICQoJy5sb2FkaW5nX2dpZicpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U3VibWlzc2lvbnModGFibGUsIGFzc2lnbm1lbnRfaWQsIHBhcnRfaWQsIHN0YXJ0LCByZWZyZXNoX3JlcXVlc3RlZCwgdG90YWwpIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiAnanNvbicsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBcImFzeW5jXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldF9zdWJtaXNzaW9uc1wiLCBhc3NpZ25tZW50OiBhc3NpZ25tZW50X2lkLCBwYXJ0OiBwYXJ0X2lkLCBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hfcmVxdWVzdGVkOiByZWZyZXNoX3JlcXVlc3RlZFtwYXJ0X2lkXSwgc2Vzc2tleTogTS5jZmcuc2Vzc2tleSwgdG90YWw6IHRvdGFsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBldmFsKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmVzdWx0LmVuZDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmFhRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5mbkFkZERhdGEocmVzdWx0LmFhRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVuZCA8IHJlc3VsdC50b3RhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3VibWlzc2lvbnModGFibGUsIGFzc2lnbm1lbnRfaWQsIHBhcnRfaWQsIHN0YXJ0LCByZWZyZXNoX3JlcXVlc3RlZCwgcmVzdWx0LnRvdGFsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgcGFydF9pZCArIFwiX3Byb2Nlc3NpbmdcIikuYXR0cignc3R5bGUnLCAndmlzaWJpbGl0eTogaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hfcmVxdWVzdGVkW3BhcnRfaWRdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxyZWZyZXNoZWQgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocmVmcmVzaF9yZXF1ZXN0ZWQsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxyZWZyZXNoZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxscmVmcmVzaGVkID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcucmVmcmVzaGluZ19saW5rJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yZWZyZXNoX2xpbmsnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdFZpc2liaWxpdHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlRWRpdGluZ1RleHQocGFydF9pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBFbWFpbCBub24gc3VibWl0dGVycyBsaW5rIGlmIHRoZXJlIGlzIGFueSBub24gc3VibWl0dGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubm9uc3VibWl0dGVycyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubm9uc3VibWl0dGVyc19saW5rJykuYXR0cignc3R5bGUnLCAnZGlzcGxheTogYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJlcnJvclwiOiBmdW5jdGlvbiAoZGF0YSwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBwYXJ0X2lkICsgXCJfcHJvY2Vzc2luZ1wiKS5hdHRyKCdzdHlsZScsICd2aXNpYmlsaXR5OiBoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmRhdGFUYWJsZXNfZW1wdHknKS5odG1sKE0uc3RyLnR1cm5pdGludG9vbHR3by50aWlzdWJtaXNzaW9uc2dldGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgb3IgaGlkZSB0aGUgc3VibWlzc2lvbiBsaW5rIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBFVUxBIGhhcyBiZWVuIGFjY2VwdGVkLlxuICAgICAgICBmdW5jdGlvbiBzdWJtaXRWaXNpYmlsaXR5KCkge1xuICAgICAgICAgICAgaWYgKCgkKFwiLnVwbG9hZF9ib3hcIikuZGF0YShcInVzZXItdHlwZVwiKSA9PSAxKSB8fCAoJChcIi51cGxvYWRfYm94XCIpLmRhdGEoXCJldWxhXCIpID09IDEpKSB7XG4gICAgICAgICAgICAgICAgJChcIi51cGxvYWRfYm94XCIpLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICQoXCIudXBsb2FkX2JveFwiKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIHJ1YnJpY3MgYmVsb25naW5nIHRvIGEgdXNlciBmcm9tIFR1cm5pdGluIGFuZCByZWZyZXNoIG1lbnUgYWNjb3JkaW5nbHkuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hSdWJyaWNTZWxlY3QoKSB7XG4gICAgICAgICAgICB2YXIgcnVicmljRWxlbWVudElkID0gKCQoJyNpZF9ydWJyaWMnKS5sZW5ndGgpID8gJyNpZF9ydWJyaWMnIDogJyNpZF9wbGFnaWFyaXNtX3J1YnJpYyc7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJ1YnJpYyA9ICQocnVicmljRWxlbWVudElkKS52YWwoKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiAnanNvbicsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiLi4vbW9kL3R1cm5pdGludG9vbHR3by9hamF4LnBocFwiLFxuICAgICAgICAgICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZWZyZXNoX3J1YnJpY19zZWxlY3RcIiwgYXNzaWdubWVudDogJCgnaW5wdXRbbmFtZT1cImluc3RhbmNlXCJdJykudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZW5hbWU6ICQoJ2lucHV0W25hbWU9XCJtb2R1bGVuYW1lXCJdJykudmFsKCksIGNvdXJzZTogJCgnaW5wdXRbbmFtZT1cImNvdXJzZVwiXScpLnZhbCgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKCQocnVicmljRWxlbWVudElkKSkuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGksIHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzTnVtZXJpYyhpKSAmJiBpICE9PSBcIlwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0Z3JvdXAgPSAkKCc8b3B0Z3JvdXA+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXAuYXR0cignbGFiZWwnLCBpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh2YWwsIGZ1bmN0aW9uIChqLCBydWJyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9ICQoXCI8b3B0aW9uPjwvb3B0aW9uPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbChqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnRleHQocnVicmljKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cC5hcHBlbmQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQocnVicmljRWxlbWVudElkKS5hcHBlbmQob3B0Z3JvdXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJChydWJyaWNFbGVtZW50SWQpKS5hcHBlbmQoJCgnPG9wdGlvbj4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICQocnVicmljRWxlbWVudElkICsgJyBvcHRpb25bdmFsdWU9XCInICsgY3VycmVudFJ1YnJpYyArICdcIl0nKS5hdHRyKFwic2VsZWN0ZWRcIiwgXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlZnJlc2ggdGhlIG51bWJlciBvZiBtZXNzYWdlcyBpbiB0aGUgdXNlcidzIFR1cm5pdGluIGluYm94LlxuICAgICAgICBmdW5jdGlvbiByZWZyZXNoVXNlck1lc3NhZ2VzKCkge1xuICAgICAgICAgICAgJCgnLm1lc3NhZ2VzX2xvYWRpbmcnKS5zaG93KCk7XG4gICAgICAgICAgICAkKCcubWVzc2FnZXNfYW1vdW50JykuaHRtbCgnJyk7XG5cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBcImRhdGFcIjogeyBhY3Rpb246IFwicmVmcmVzaF91c2VyX21lc3NhZ2VzXCIsIGFzc2lnbm1lbnQ6ICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1lc3NhZ2VzX2xvYWRpbmcnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlc19hbW91bnQnKS5odG1sKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGlkZSBQZWVybWFyayBhc3NpZ25tZW50cyBmb3IgcmVmcmVzaGluZy5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRQZWVybWFya1NlY3Rpb24ocGFydF9pZCkge1xuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC50b2dnbGVfcGVlcm1hcmtzJykuaGlkZSgpO1xuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZWVybWFya19jb3VudCcpLmh0bWwoJycpO1xuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZWVybWFyay1sb2FkaW5nJykuc2hvdygpO1xuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZWVybWFya19hc3NpZ25tZW50c19jb250YWluZXInKS5oaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWZyZXNoIHRoZSBQZWVybWFyayBBc3NpZ25tZW50cyBmcm9tIFR1cm5pdGluIGFuZCBzaG93IGluIFBhcnQgRGV0YWlscyBzZWN0aW9uIG9mIGluYm94LlxuICAgICAgICBmdW5jdGlvbiByZWZyZXNoUGVlcm1hcmtBc3NpZ25tZW50cyhwYXJ0X2lkLCByZWZyZXNoX3JlcXVlc3RlZCkge1xuXG4gICAgICAgICAgICB2YXIgdXNlcl9yb2xlID0gKCQoJy50aWlfcGVlcm1hcmtfbWFuYWdlcl9sYXVuY2gnKS5sZW5ndGggPiAwKSA/ICdJbnN0cnVjdG9yJyA6ICdMZWFybmVyJ1xuXG4gICAgICAgICAgICBpZiAoJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZWVybWFya19hc3NpZ25tZW50c19jb250YWluZXInKS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICByZXNldFBlZXJtYXJrU2VjdGlvbihwYXJ0X2lkKTtcblxuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVR5cGVcIjogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZWZyZXNoX3BlZXJtYXJrX2Fzc2lnbm1lbnRzXCIsIGFzc2lnbm1lbnQ6ICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydDogcGFydF9pZCwgcmVmcmVzaF9yZXF1ZXN0ZWQ6IHJlZnJlc2hfcmVxdWVzdGVkLCBzZXNza2V5OiBNLmNmZy5zZXNza2V5XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZWVybWFya19hc3NpZ25tZW50c19jb250YWluZXInKS5odG1sKGRhdGEucGVlcm1hcmtfdGFibGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLnBlZXJtYXJrLWxvYWRpbmcnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLnBlZXJtYXJrX2NvdW50JykuaHRtbChkYXRhLm5vX29mX3BlZXJtYXJrcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm5vX29mX3BlZXJtYXJrcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLnRvZ2dsZV9wZWVybWFya3MnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAudG9nZ2xlX3BlZXJtYXJrcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChkYXRhLm5vX29mX3BlZXJtYXJrcyA+IDAgJiYgdXNlcl9yb2xlID09ICdJbnN0cnVjdG9yJykgfHwgKGRhdGEucGVlcm1hcmtzX2FjdGl2ZSAmJiB1c2VyX3JvbGUgPT0gJ0xlYXJuZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAucm93X3BlZXJtYXJrX3Jldmlld3MnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmNvb2tpZSgnc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKSA9PSBcInRydWVcIiAmJiBkYXRhLm5vX29mX3BlZXJtYXJrcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuc2hvd19wZWVybWFya3NfJyArICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmhpZGVfcGVlcm1hcmtzXycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5wZWVybWFya19hc3NpZ25tZW50c19jb250YWluZXInKS5zbGlkZURvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnNob3dfcGVlcm1hcmtzXycgKyAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5oaWRlX3BlZXJtYXJrc18nICsgJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcucGVlcm1hcmtfYXNzaWdubWVudHNfY29udGFpbmVyJykuc2xpZGVVcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IGxpZ2h0IGJveCB3aXRoIGZvcm0gdG8gcmV2ZWFsIHRoZSBzdHVkZW50J3MgbmFtZSBvbiBhbiBhbm9ueW1pc2VkIHN1Ym1pc3Npb24uXG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpc2VVbmFub3ltaXNlRm9ybShzY29wZSwgYXNzaWdubWVudF9pZCwgc3VibWlzc2lvbl9pZCkge1xuICAgICAgICAgICAgdmFyIGlkZW50aWZpZXIgPSAnYS51bmFub255bWlzZSc7XG4gICAgICAgICAgICBpZiAoc2NvcGUgPT0gXCJyb3dcIikge1xuICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSAnI3N1Ym1pc3Npb25fJyArIHN1Ym1pc3Npb25faWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKGlkZW50aWZpZXIpLmNvbG9yYm94KHtcbiAgICAgICAgICAgICAgICBpbmxpbmU6IHRydWUsIHdpZHRoOiBcIjUwJVwiLCB0b3A6IFwiMTAwcHhcIiwgaGVpZ2h0OiBcIjI2MHB4XCIsIG9wYWNpdHk6IFwiMC43XCIsIGNsYXNzTmFtZTogXCJ0aWlfdW5hbm9ueW1pc2VfcmV2ZWFsX2Zvcm1cIixcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZFN0ciA9ICQodGhpcykuYXR0cihcImlkXCIpLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25faWQgPT0gMCB8fCBzdWJtaXNzaW9uX2lkID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Ym1pc3Npb25faWQgPSBpZFN0clsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXNzaWdubWVudF9pZCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50X2lkID0gJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJChcIiNzdWJtaXNzaW9uX2lkXCIpLmh0bWwoc3VibWlzc2lvbl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNjYm94TG9hZGVkQ29udGVudCAudW5hbm9ueW1pc2VfZm9ybScpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2lkX3JldmVhbCcpLnVuYmluZChcImNsaWNrXCIpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjaWRfcmV2ZWFsJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFUeXBlXCI6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cmxcIjogXCJhamF4LnBocFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXZlYWxfc3VibWlzc2lvbl9uYW1lXCIsIGFzc2lnbm1lbnQ6IGFzc2lnbm1lbnRfaWQsIHN1Ym1pc3Npb25faWQ6IHN1Ym1pc3Npb25faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogZW5jb2RlVVJJQ29tcG9uZW50KCQoXCIjaWRfYW5vbnltb3VzX3JldmVhbF9yZWFzb25cIikudmFsKCkpLCBzZXNza2V5OiBNLmNmZy5zZXNza2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuY29sb3Jib3guY2xvc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb25fJyArIHN1Ym1pc3Npb25faWQpLmF0dHIoJ2hyZWYnLCBNLmNmZy53d3dyb290ICsgXCIvdXNlci92aWV3LnBocD9pZD1cIiArIGRhdGEudXNlcmlkICsgXCImY291cnNlPVwiICsgZGF0YS5jb3Vyc2VpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc3VibWlzc2lvbl8nICsgc3VibWlzc2lvbl9pZCkuaHRtbChkYXRhLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb25fJyArIHN1Ym1pc3Npb25faWQpLnJlbW92ZUNsYXNzKCd1bmFub255bWlzZSBjYm94RWxlbWVudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRfbXNnID0gJCgnI3VuYW5vbnltaXNlX2Rlc2MnKS5odG1sO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3VuYW5vbnltaXNlX2Rlc2MnKS5odG1sKGN1cnJlbnRfbXNnICsgXCIgXCIgKyBkYXRhLm1zZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnVuYW5vbnltaXNlX2Zvcm0nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXNlVXBsb2FkQm94KHNjb3BlLCBzdWJtaXNzaW9uX2lkLCBwYXJ0X2lkLCB1c2VyX2lkKSB7XG4gICAgICAgICAgICB2YXIgaWRlbnRpZmllciA9IFwiLnVwbG9hZF9ib3hcIjtcbiAgICAgICAgICAgIGlmIChzY29wZSA9PSBcInJvd1wiKSB7XG4gICAgICAgICAgICAgICAgaWRlbnRpZmllciA9IFwiI3VwbG9hZF9cIiArIHN1Ym1pc3Npb25faWQgKyBcIl9cIiArIHBhcnRfaWQgKyBcIl9cIiArIHVzZXJfaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb2xvckJveFdpZHRoID0gXCI4MCVcIjtcbiAgICAgICAgICAgIHZhciBjb2xvckJveEhlaWdodCA9IFwiODAlXCI7XG5cbiAgICAgICAgICAgICQoaWRlbnRpZmllcikuY29sb3Jib3goe1xuICAgICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0Qm94Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsb3NlZDogZnVuY3Rpb24gKCkgeyBoaWRlTG9hZGluZ0dpZigpOyB9LFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWRTdHIgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hJbmJveFJvdyhcInVwbG9hZFwiLCBpZFN0clsxXSwgaWRTdHJbMl0sIGlkU3RyWzNdKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjdGlpX2Nsb3NlX2JhcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogY29sb3JCb3hXaWR0aCwgaGVpZ2h0OiBjb2xvckJveEhlaWdodCwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcInVwbG9hZFwiLCB0cmFuc2l0aW9uOiBcIm5vbmVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXNlIHRoZSBldmVudHMgdG8gb3BlbiB0aGUgemlwIGZpbGVzIGNvbnRhaW5lZCBpbiB0aGUgcGFydCBkZXRhaWxzIGluZm9ybWF0aW9uIHRhYmxlOlxuICAgICAgICAvLyBJbmJveCBpbiBYTFMgZm9ybWF0XG4gICAgICAgIC8vIFpJUCBjb250YWluaW5nIGFsbCBmaWxlcyBhcyBQREZzXG4gICAgICAgIC8vIFpJUCBjb250YWluaW5nIGFsbCBmaWxlcyBpbiBvcmlnaW5hbCBmb3JtYXQuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpc2VaaXBEb3dubG9hZHMocGFydF9pZCkge1xuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBldmVudCBmaXJzdCB0byBzdG9wIGl0IGJlaW5nIGJpbmRlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAgICAgICQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAub3JpZ196aXBfb3BlbiwgI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5wZGZfemlwX29wZW4sICN0YWJzLScgKyBwYXJ0X2lkICsgJyAueGxzX2luYm94X29wZW4nKS51bmJpbmQoXCJjbGlja1wiKTtcblxuICAgICAgICAgICAgLy8gT3BlbiBhIHNwcmVhZHNoZWV0IG9yIGEgemlwIGZpbGUgY29udGFpbmluZyBhbGwgdGhlIHJlbGV2YW50IGRhdGEuXG4gICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLm9yaWdfemlwX29wZW4sICN0YWJzLScgKyBwYXJ0X2lkICsgJyAucGRmX3ppcF9vcGVuLCAjdGFicy0nICsgcGFydF9pZCArICcgLnhsc19pbmJveF9vcGVuJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpZFN0ciA9ICQodGhpcykuYXR0cihcImlkXCIpLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgICAgICBkb3dubG9hZFppcEZpbGUoaWRTdHJbMF0gKyBcIl9cIiArIGlkU3RyWzFdLCBpZFN0clsyXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gT3BlbiBhbiBpZnJhbWUgbGlnaHQgYm94IHdoaWNoIHJlcXVlc3RzIGFsbCB0aGUgc3VibWlzc2lvbnMgYXMgcGRmcyBmcm9tIFR1cm5pdGluLlxuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5kb3dubG9hZHBkZl9ib3gnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI0MCVcIiwgaGVpZ2h0OiBcIjYwJVwiLCBvcGFjaXR5OiBcIjAuN1wiLCBjbGFzc05hbWU6IFwiZG93bmxvYWRwZGZfd2luZG93XCIsIHRyYW5zaXRpb246IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsaWdodEJveENsb3NlQnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldExvYWRpbmdHaWYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjdGlpX2Nsb3NlX2JhcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0dpZigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbG9zZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFVzZXJNZXNzYWdlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBPcGVuIGFuIGlmcmFtZSBsaWdodCBib3ggd2hpY2ggcmVxdWVzdHMgc2VsZWN0ZWQgc3VibWlzc2lvbnMgYXMgcGRmcyBmcm9tIFR1cm5pdGluLlxuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAuZ21wZGZ6aXBfYm94JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmNvbG9yYm94KHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSwgaWZyYW1lOiB0cnVlLCB3aWR0aDogXCI3ODZweFwiLCBoZWlnaHQ6IFwiMzAwcHhcIiwgb3BhY2l0eTogXCIwLjdcIiwgY2xhc3NOYW1lOiBcImdtcGRmemlwX3dpbmRvd1wiLCB0cmFuc2l0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Ym1pc3Npb25faWRzID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5pbmJveF9jaGVja2JveDpjaGVja2VkJykuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25faWRzICs9IFwiJnN1Ym1pc3Npb25faWRcIiArIGkgKyBcIj1cIiArICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmF0dHIoJ2hyZWYnKSArIHN1Ym1pc3Npb25faWRzO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHsgZ2V0TG9hZGluZ0dpZigpOyB9LFxuICAgICAgICAgICAgICAgICAgICBvbkNsZWFudXA6IGZ1bmN0aW9uICgpIHsgaGlkZUxvYWRpbmdHaWYoKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgb25DbG9zZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hVc2VyTWVzc2FnZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbGlnaHRCb3hDbG9zZUJ1dHRvbigpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9XCJ0aWlfY2xvc2VfYmFyXCI+PGEgaHJlZj1cIiNcIiBvbmNsaWNrPVwialF1ZXJ5KFxcJyNjYm94Q2xvc2VcXCcpLmNsaWNrKCk7IHJldHVybiBmYWxzZTtcIj4nICsgTS5zdHIudHVybml0aW50b29sdHdvLmNsb3NlYnV0dG9uICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTVEFSVCBVQ0xBIE1PRDogQ0NMRS02Mjk3IExhdW5jaCBwZWVybWFyayBtYW5hZ2VyIGNsb3NlIGJ1dHRvbi5cbiAgICAgICAgZnVuY3Rpb24gc21hbGxUaWlDbG9zZUJ1dHRvbigpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9XCJzbWFsbF90aWlfY2xvc2VfYnV0dG9uXCI+PGEgaHJlZj1cIiNcIiBvbmNsaWNrPVwialF1ZXJ5KFxcJyNjYm94Q2xvc2VcXCcpLmNsaWNrKCk7IHJldHVybiBmYWxzZTtcIj4nICsgTS5zdHIudHVybml0aW50b29sdHdvLmNsb3NlYnV0dG9uICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFTkQgVUNMQSBNT0Q6IENDTEUtNjI5Ny5cblxuICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXNlRGlnaXRhbFJlY2VpcHQoKSB7XG4gICAgICAgICAgICBpZiAoJCgnLnRpaV9kaWdpdGFsX3JlY2VpcHQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgJCgnLnRpaV9kaWdpdGFsX3JlY2VpcHQnKS5jb2xvcmJveCh7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZTogdHJ1ZSwgd2lkdGg6IFwiODMycHhcIiwgaGVpZ2h0OiBcIjQ4MnB4XCIsIG9wYWNpdHk6IFwiMC43XCIsIGNsYXNzTmFtZTogXCJydWJyaWNfdmlld1wiLCB0cmFuc2l0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodEJveENsb3NlQnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xlYW51cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3RpaV9jbG9zZV9iYXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nR2lmKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICQoJyN0aWlfcmVjZWlwdF9wcmludCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXNlSGlkZGVuWmlwRG93bmxvYWRzKHBhcnRfaWQpIHtcbiAgICAgICAgICAgIC8vIFVuYmluZCB0aGUgZXZlbnQgZmlyc3QgdG8gc3RvcCBpdCBiZWluZyBiaW5kZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLm9yaWdjaGVja2VkX3ppcF9vcGVuJykudW5iaW5kKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAvLyBTZXBlcmF0ZSBiaW5kZXIgZm9yIGhpZGRlbiB6aXAgZmlsZSBsaW5rLlxuICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC5vcmlnY2hlY2tlZF96aXBfb3BlbicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRTdHIgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgZG93bmxvYWRaaXBGaWxlKGlkU3RyWzBdICsgXCJfXCIgKyBpZFN0clsxXSwgcGFydF9pZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXNlUmVmcmVzaFJvdyhzY29wZSwgc3VibWlzc2lvbl9pZCwgcGFydF9pZCwgdXNlcl9pZCkge1xuICAgICAgICAgICAgdmFyIGlkZW50aWZpZXIgPSBcIi5yZWZyZXNoX3JvdyAuZmEtcmVmcmVzaFwiO1xuICAgICAgICAgICAgaWYgKHNjb3BlID09IFwicm93XCIpIHtcbiAgICAgICAgICAgICAgICBpZGVudGlmaWVyID0gXCIjcmVmcmVzaHJvd19cIiArIHN1Ym1pc3Npb25faWQgKyAnXycgKyBwYXJ0X2lkICsgXCJfXCIgKyB1c2VyX2lkICsgXCIgLmZhLXJlZnJlc2hcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBldmVudCBmaXJzdCB0byBzdG9wIGl0IGJlaW5nIGJpbmRlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAgICAgICQoaWRlbnRpZmllcikudW5iaW5kKFwiY2xpY2tcIik7XG5cbiAgICAgICAgICAgICQoaWRlbnRpZmllcikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJy5mYS1zcGlubmVyJykuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKS5hZGRDbGFzcygnZmEtbGcnKTtcbiAgICAgICAgICAgICAgICB2YXIgaWRTdHIgPSAkKHRoaXMpLnBhcmVudCgpLmF0dHIoXCJpZFwiKS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgcmVmcmVzaEluYm94Um93KGlkU3RyWzBdLCBpZFN0clsxXSwgaWRTdHJbMl0sIGlkU3RyWzNdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSB0aGUgZXZlbnRzIHRvIG9wZW4gdGhlIGRvY3VtZW50IHZpZXdlciBhcyB0aGUgbGlua3MgYXJlIGxvYWRlZCBhZnRlciB0aGUgcGFnZS5cbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGlzZURWTGF1bmNoZXJzKHNjb3BlLCBzdWJtaXNzaW9uX2lkLCBwYXJ0X2lkLCB1c2VyX2lkKSB7XG4gICAgICAgICAgICB2YXIgaWRlbnRpZmllciA9ICcjJyArIHBhcnRfaWQgKyAnIC5kb3dubG9hZF9vcmlnaW5hbF9vcGVuJztcbiAgICAgICAgICAgIGlmIChzY29wZSA9PSBcInJvd1wiKSB7XG4gICAgICAgICAgICAgICAgaWRlbnRpZmllciA9ICcjZG93bmxvYWRvcmlnaW5hbF8nICsgc3VibWlzc2lvbl9pZCArICdfJyArIHBhcnRfaWQgKyAnXycgKyB1c2VyX2lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVbmJpbmQgdGhlIGV2ZW50IGZpcnN0IHRvIHN0b3AgaXQgYmVpbmcgYmluZGVkIG11bHRpcGxlIHRpbWVzLlxuICAgICAgICAgICAgJChpZGVudGlmaWVyKS51bmJpbmQoXCJjbGlja1wiKTtcblxuICAgICAgICAgICAgJChpZGVudGlmaWVyKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkU3RyID0gJCh0aGlzKS5hdHRyKFwiaWRcIikuc3BsaXQoXCJfXCIpO1xuICAgICAgICAgICAgICAgIC8vIERvbid0IG9wZW4gT1IgRFYgaWYgc2NvcmUgaXMgcGVuZGluZy5cbiAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuY2hpbGRyZW4oJy5zY29yZV9jb2xvdXInKS5oYXNDbGFzcygnc2NvcmVfY29sb3VyXycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkT3JpZ2luYWxGaWxlKGlkU3RyWzBdLCBpZFN0clsxXSwgaWRTdHJbMl0sIGlkU3RyWzNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFB1dCB0aGUgZm9ybSBpbiB0byB0aGUgc3VibWlzc2lvbnMgdGFibGUgcm93IGFuZCBzdWJtaXQgaXQuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBkb3dubG9hZCB0aGUgcmVsZXZhbnQgemlwIGZpbGUuXG4gICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkWmlwRmlsZShkb3dubG9hZHR5cGUsIHBhcnRfaWQpIHtcbiAgICAgICAgICAgIHZhciBzdWJtaXNzaW9uX2lkcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZG93bmxvYWR0eXBlID09IFwib3JpZ2NoZWNrZWRfemlwXCIgfHwgZG93bmxvYWR0eXBlID09IFwiZ21wZGZfemlwXCIpIHtcbiAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLmluYm94X2NoZWNrYm94OmNoZWNrZWQnKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25faWRzW2ldID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJodG1sXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogeyBhY3Rpb246IGRvd25sb2FkdHlwZSwgYXNzaWdubWVudDogJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCksIHBhcnQ6IHBhcnRfaWQsIHN1Ym1pc3Npb25faWRzOiBzdWJtaXNzaW9uX2lkcyB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjXCIgKyBkb3dubG9hZHR5cGUgKyBcIl9mb3JtX1wiICsgcGFydF9pZCkuaHRtbChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNcIiArIGRvd25sb2FkdHlwZSArIFwiX2Zvcm1fXCIgKyBwYXJ0X2lkKS5jaGlsZHJlbihcImZvcm1cIikuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjXCIgKyBkb3dubG9hZHR5cGUgKyBcIl9mb3JtX1wiICsgcGFydF9pZCkuaHRtbChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFB1dCB0aGUgZm9ybSBpbiB0byB0aGUgc3VibWlzc2lvbnMgdGFibGUgcm93IGFuZCBzdWJtaXQgaXQuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBkb3dubG9hZCB0aGUgcmVsZXZhbnQgb3JpZ2luYWwgZmlsZS5cbiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRPcmlnaW5hbEZpbGUoZHZ0eXBlLCBzdWJtaXNzaW9uX2lkLCBwYXJ0X2lkLCB1c2VyX2lkKSB7XG4gICAgICAgICAgICAvLyBHZXQgaHRtbCB0byBsYXVuY2ggRFYuXG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIHVybDogTS5jZmcud3d3cm9vdCArIFwiL21vZC90dXJuaXRpbnRvb2x0d28vYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJodG1sXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogeyBhY3Rpb246IGR2dHlwZSwgc3VibWlzc2lvbjogc3VibWlzc2lvbl9pZCwgYXNzaWdubWVudDogJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCkgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKFwiI1wiICsgZHZ0eXBlICsgXCJfZm9ybV9cIiArIHN1Ym1pc3Npb25faWQpLmh0bWwoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjXCIgKyBkdnR5cGUgKyBcIl9mb3JtX1wiICsgc3VibWlzc2lvbl9pZCkuY2hpbGRyZW4oXCJmb3JtXCIpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAkKFwiI1wiICsgZHZ0eXBlICsgXCJfZm9ybV9cIiArIHN1Ym1pc3Npb25faWQpLmh0bWwoXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBEViBpcyBzdGlsbCBvcGVuLCByZWZyZXNoIHRoZSBvcGVuaW5nIHdpbmRvdyB3aGVuIGl0IGNsb3Nlcy5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tEVkNsb3NlZChwYXJ0X2lkKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmR2V2luZG93LmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICQoXCIjcmVmcmVzaF9cIiArIHBhcnRfaWQpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0RWQ2xvc2VkKHBhcnRfaWQpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWF0ZSBhIG5vdGhpbmcgc3VibWlzc2lvbi5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0Tm90aGluZyh1c2VyX2lkLCBwYXJ0X2lkKSB7XG4gICAgICAgICAgICAkKFwiI3N1Ym1pdG5vdGhpbmdfMF9cIiArIHBhcnRfaWQgKyBcIl9cIiArIHVzZXJfaWQgKyBcIiBpXCIpLmF0dHIoJ2NsYXNzJywgJ2ZhIGZhLXNwaW4gZmEtc3Bpbm5lciBmYS1sZycpO1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IFwiYWpheC5waHBcIixcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwic3VibWl0X25vdGhpbmdcIiwgYXNzaWdubWVudDogJCgnI2Fzc2lnbm1lbnRfaWQnKS5odG1sKCksXG4gICAgICAgICAgICAgICAgICAgIHBhcnQ6IHBhcnRfaWQsIHVzZXI6IHVzZXJfaWQsIHNlc3NrZXk6IE0uY2ZnLnNlc3NrZXlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2YWwoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICQuY29va2llKCdzdWJtaXRub3RoaW5nYWNjZXB0JywgdHJ1ZSwgeyBleHBpcmVzOiAzNjUgfSk7XG4gICAgICAgICAgICAgICAgICAgICQoJ3RhYmxlIycgKyBwYXJ0X2lkICsgJyAuc2VsZWN0X2FsbF9jaGVja2JveCcpLmF0dHIoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzdWJtaXRub3RoaW5nXzBfXCIgKyBwYXJ0X2lkICsgXCJfXCIgKyB1c2VyX2lkICsgXCIgaVwiKS5hdHRyKCdjbGFzcycsICdmYSBmYS1wZW5jaWwgZmEtbGcnKTtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzdWJtaXRub3RoaW5nXzBfXCIgKyBwYXJ0X2lkICsgXCJfXCIgKyB1c2VyX2lkKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoZGF0YS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEluYm94Um93KCdzdWJtaXRub3RoaW5nJywgMCwgcGFydF9pZCwgdXNlcl9pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWZyZXNoIGEgcm93IGluIHRoZSBpbmJveCBhZnRlciBhIHN1Ym1pc3Npb24gaGFzIGJlZW4gbWFkZSBvciBEViBjbG9zZWQuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hJbmJveFJvdyhsaW5rLCBzdWJtaXNzaW9uX2lkLCBwYXJ0X2lkLCB1c2VyX2lkKSB7XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIHVybDogXCJhamF4LnBocFwiLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZWZyZXNoX3N1Ym1pc3Npb25fcm93XCIsIGFzc2lnbm1lbnQ6ICQoJyNhc3NpZ25tZW50X2lkJykuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0OiBwYXJ0X2lkLCB1c2VyOiB1c2VyX2lkLCBzZXNza2V5OiBNLmNmZy5zZXNza2V5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkKCd0YWJsZSMnICsgcGFydF9pZCArICcgLnNlbGVjdF9hbGxfY2hlY2tib3gnKS5hdHRyKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBldmFsKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJtaXNzaW9uX2lkID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgKz0gXCJfMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbl9pZCA9IGRhdGEuc3VibWlzc2lvbl9pZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN1Ym1pc3Npb25faWQgPT0gbnVsbCAmJiBzdWJtaXNzaW9uX2lkICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPSBsaW5rICsgXCJfXCIgKyBzdWJtaXNzaW9uX2lkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGxpbmsgKyBcIl9cIiArIGRhdGEuc3VibWlzc2lvbl9pZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGV4cG9ydCBsaW5rcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25faWQgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2V4cG9ydF9saW5rcycpLnJlbW92ZUNsYXNzKCdoaWRkZW5fY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgcm93IGFuZCByZS1hZGQuXG4gICAgICAgICAgICAgICAgICAgIG9UYWJsZSA9ICQoJ3RhYmxlIycgKyBwYXJ0X2lkKS5kYXRhVGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyID0gJChcIiNcIiArIGxpbmsgKyBcIl9cIiArIHBhcnRfaWQgKyAnXycgKyB1c2VyX2lkKS5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd2luZGV4ID0gdHIuaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgb1RhYmxlLmZuRGVsZXRlUm93KHRyKTtcbiAgICAgICAgICAgICAgICAgICAgb1RhYmxlLmZuQWRkRGF0YShkYXRhLnJvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VibWl0VmlzaWJpbGl0eSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VVcGxvYWRCb3goXCJyb3dcIiwgZGF0YS5zdWJtaXNzaW9uX2lkLCBwYXJ0X2lkLCB1c2VyX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGlzZURWTGF1bmNoZXJzKFwicm93XCIsIGRhdGEuc3VibWlzc2lvbl9pZCwgcGFydF9pZCwgdXNlcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VSZWZyZXNoUm93KFwicm93XCIsIGRhdGEuc3VibWlzc2lvbl9pZCwgcGFydF9pZCwgdXNlcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VDaGVja2JveGVzKGRhdGEuc3VibWlzc2lvbl9pZCwgcGFydF9pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VVbmFub3ltaXNlRm9ybShcInJvd1wiLCAkKCcjYXNzaWdubWVudF9pZCcpLmh0bWwoKSwgZGF0YS5zdWJtaXNzaW9uX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgZG93bmxvYWQgbGlua3Mgd2hlbiBjaGVja2JveGVzIGhhdmUgYmVlbiB0aWNrZWQuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpc2VDaGVja2JveGVzKHN1Ym1pc3Npb25faWQsIHBhcnRfaWQpIHtcbiAgICAgICAgICAgIHZhciBpZGVudGlmaWVyID0gJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAuaW5ib3hfY2hlY2tib3gnO1xuICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25faWQgIT0gMCkge1xuICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSAnY2hlY2tfJyArIHN1Ym1pc3Npb25faWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAuaW5ib3hfY2hlY2tib3gnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCgndGFibGUjJyArIHBhcnRfaWQgKyAnIC5zZWxlY3RfYWxsX2NoZWNrYm94JykuYXR0cignY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBpZGVudGlmaWVyICsgJywgLnNlbGVjdF9hbGxfY2hlY2tib3gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoJyN0YWJzLScgKyBwYXJ0X2lkICsgJyAuaW5ib3hfY2hlY2tib3g6Y2hlY2tlZCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3RhYnMtJyArIHBhcnRfaWQgKyAnIC56aXBfZG93bmxvYWRzJykuc2xpZGVEb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2VIaWRkZW5aaXBEb3dubG9hZHMocGFydF9pZClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLm9yaWdjaGVja2VkX3ppcF9vcGVuJykudW5iaW5kKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjdGFicy0nICsgcGFydF9pZCArICcgLnppcF9kb3dubG9hZHMnKS5zbGlkZVVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBkYXRlIGFuZCBtYXJrcyBvcHRpb25zIGZvciB0aGUgcmVsZXZhbnQgbnVtYmVyIG9mIHBhcnRzIHdoZW4gY3JlYXRpbmcvZWRpdGluZyBhc3NpZ25tZW50LlxuICAgICAgICBmdW5jdGlvbiBzaG93UGFydERhdGVzQm94ZXMoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSA1OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8PSAkKFwiI2lkX251bXBhcnRzXCIpLnZhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJ2ZpZWxkc2V0W2lkJD1cInBhcnRkYXRlcycgKyBpICsgJ1wiXScpLnNsaWRlRG93bigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoJ2ZpZWxkc2V0W2lkJD1cInBhcnRkYXRlcycgKyBpICsgJ1wiXScpLnNsaWRlVXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkKCcuc2VsZWN0X2FsbF9jaGVja2JveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpZCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkucGFyZW50KCkucGFyZW50KCkuYXR0cignaWQnKTtcblxuICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBpZCArICcgLmluYm94X2NoZWNrYm94JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyN0YWJzLScgKyBpZCArICcgLnppcF9kb3dubG9hZHMnKS5zbGlkZURvd24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCgnIycgKyBpZCArICcgLmluYm94X2NoZWNrYm94JykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjJyArIGlkICsgJyAuaW5ib3hfY2hlY2tib3gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICgkKCcjJyArIGlkICsgJyAuaW5ib3hfY2hlY2tib3gnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3RhYnMtJyArIGlkICsgJyAuemlwX2Rvd25sb2FkcycpLnNsaWRlVXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldHRpbmdzIHBhZ2UgcGFydHMgd2FybmluZy5cbiAgICAgICAgJCgnW2lkXj1maXRlbV9pZF9kdHBvc3RdIHNlbGVjdCcpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBHZXQgcGFydCBpZCBmcm9tIHRpdGxlLlxuICAgICAgICAgICAgdmFyIGRhdGFFbCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkucGFyZW50KCk7XG4gICAgICAgICAgICB2YXIgcG9zdF9kYXRlID0gYnVpbGRVbml4RGF0ZSgnI2ZpdGVtX2lkX2R0cG9zdCcsIGRhdGFFbC5kYXRhKCdwYXJ0SWQnKSk7XG5cbiAgICAgICAgICAgIGlmIChwb3N0X2RhdGUgPCBtb21lbnQoKS51bml4KCkgJiYgZGF0YUVsLmRhdGEoJ2Fub24nKSA9PSAxICYmIGRhdGFFbC5kYXRhKCd1bmFub24nKSA9PSAwICYmIGRhdGFFbC5kYXRhKCdzdWJtaXR0ZWQnKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoTS5zdHIudHVybml0aW50b29sdHdvLmFub25hbGVydCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGJ1aWxkVW5peERhdGUgPSBmdW5jdGlvbiAoZWwsIHBhcnRfaWQpIHtcbiAgICAgICAgICAgIC8vIE9wdGlvbiBpZCdzLlxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gWydfZGF5JywgJ19tb250aCcsICdfeWVhcicsICdfaG91cicsICdfbWludXRlJ107XG5cbiAgICAgICAgICAgICR0aGlzID0gJChlbCArIHBhcnRfaWQpO1xuXG4gICAgICAgICAgICAvLyBCdWlsZCBkYXRlOnRpbWUgc3RyaW5nLlxuICAgICAgICAgICAgdmFyIGRhdGUgPSAnJztcbiAgICAgICAgICAgICQuZWFjaChzdGFydCwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICAgICAgICBkYXRlICs9ICR0aGlzLmZpbmQoJ1tpZCQ9JyArIHBhcnRfaWQgKyB2ICsgJ10gb3B0aW9uOnNlbGVjdGVkJykudGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmICh2ID09PSAnX3llYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gJyAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodiA9PT0gJ19ob3VyJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRlICs9ICc6JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYgIT09ICdfbWludXRlJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRlICs9ICctJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmV0dXJuIGNvbnZlcnRlZCBtb21lbnQgb2JqZWN0LlxuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlLCBcIkRELU1NTU0tWVlZWSBoaDptbVwiKS51bml4KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKGpRdWVyeSk7XG4iXX0=
